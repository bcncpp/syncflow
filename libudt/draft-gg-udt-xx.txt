

<!DOCTYPE html>
<!-- Server: sfs-forge-3 -->


    

















<html lang="en" class="no-js">
<head>
    <meta content="text/html; charset=UTF-8" http-equiv="content-type"/>
    <title>
  udt / Git /
  [6b4216]
  /udt4/draft-gg-udt-xx.txt
</title>
    

<meta name="viewport" content="width=1100">


<link rel="icon" sizes="180x180" href="https://a.fsdn.com/con/img/sandiego/logo-180x180.png" type="image/png">
<link rel="icon" sizes="any" href="https://a.fsdn.com/con/img/sandiego/svg/originals/sf-icon-orange-no_sf.svg" type="image/svg+xml">
<link rel="apple-touch-icon" sizes="180x180" href="https://a.fsdn.com/con/img/sandiego/logo-180x180.png">
<link rel="mask-icon" href="https://a.fsdn.com/con/img/sandiego/svg/originals/sf-icon-orange-no_sf.svg" color="#FF6600">

    



    
    
    
    
    
    
    
    
    <link rel="stylesheet" href="https://a.fsdn.com/con/css/lato.css?">


<script>
if (!window.SF) { window.SF = {}; }
SF.sandiego = false;
SF.sandiego_chrome = true;
SF.cdn = "https://a.fsdn.com/con";
SF.fpid = 'd86510e7-187d-4b6b-87c7-63fc6836bef5';
SF.billboard_route = '/software/product/$slug/';
</script>
    
        <!-- ew:head_css -->

    
        <link rel="stylesheet"
                type="text/css"
                href="https://a.fsdn.com/allura/nf/1744816769/_ew_/_slim/css?href=allura%2Fcss%2Fforge%2Fhilite.css%3Ballura%2Fcss%2Fforge%2Ftooltipster.css"
                >
    
        <link rel="stylesheet"
                type="text/css"
                href="https://a.fsdn.com/allura/nf/1744816769/_ew_/allura/css/font-awesome.min.css"
                >
    
        <link rel="stylesheet"
                type="text/css"
                href="https://a.fsdn.com/allura/nf/1744816769/_ew_/theme/sftheme/css/forge.css"
                >
    
        <link rel="stylesheet"
                type="text/css"
                href="https://a.fsdn.com/allura/nf/1744816769/_ew_/theme/sftheme/css/sftheme/sandiego/cmp.css"
                >
    
        
<!-- /ew:head_css -->

    
    
        <!-- ew:head_js -->

    
        <script type="text/javascript" src="https://a.fsdn.com/allura/nf/1744816769/_ew_/_slim/js?href=allura%2Fjs%2Fjquery-3.6.0.min.js%3Ballura%2Fjs%2Fjquery.cookie-1.4.1.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fcmp2.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fshared_head.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Ftypescript%2Fcompliance.js"></script>
    
        
<!-- /ew:head_js -->

    

    
        <style type="text/css">
            /* make URL &amp; Project custom fields in support tickets not get hidden as much */
.project-forge.mountpoint-site-support .view_holder .grid-4:nth-child(5),
.project-forge.mountpoint-site-support .view_holder .grid-4:nth-child(6) {
  overflow: visible;
  font-size: 22px;
  width: 340px;
  line-height: 1;
  margin-bottom: 5px;
}
.project-forge.mountpoint-site-support .view_holder .grid-4:nth-child(5) label, .project-forge.mountpoint-site-support .view_holder .grid-4:nth-child(6) label {
  font-size: 14px;
}
        </style>
    
    
    <link rel="alternate" type="application/rss+xml" title="RSS" href="/p/udt/git/feed.rss"/>
    <link rel="alternate" type="application/atom+xml" title="Atom" href="/p/udt/git/feed.atom"/>
    <style type="text/css">
        #access_urls .btn-set {
            
            min-width: 14em;
        }
    </style>

    <style>.XwCiXjCptwrCmyHDlOfQQvChDZSsKXYzg {
        display: none
    }</style>

    
    
    
        <link rel="canonical" href="https://sourceforge.net/p/udt/git/ci/master/tree/udt4/draft-gg-udt-xx.txt" />
    


    


    
    <script>
        window.bizx.cmp.init({
            
            geo: {
                is_euro_union: 1,
                country_code2: 'IT',
                region: '',
            },
        });
    </script>




<script>
    function initPiwik(){
      var _paq = window._paq = window._paq || [];
      _paq.push(['trackPageView', document.title, {
            dimension1: 'udt',
            dimension2: 'git'
      }]);
      _paq.push(['enableLinkTracking']);
      (function() {
        var u="//analytics.slashdotmedia.com/";
        _paq.push(['setTrackerUrl', u+'sf.php']);
        _paq.push(['setSiteId', 39]);
        
        var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
        g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'sf.js'; s.parentNode.insertBefore(g,s);
      })();
    }
    bizx.cmp.ifConsent({ purposes: ['storage', 'measurement'], vendors: 'sdm'}, initPiwik);
</script>






<!-- Hubspot tracking -->










</head>

<body class="
body_class sandiego_chrome  legacy_chrome  l-allow-natural-width 
" id="forge">

    
        <!-- ew:body_top_js -->

    
        
<!-- /ew:body_top_js -->

    





<div class="off-canvas position-right" id="offCanvas" data-off-canvas>
    <!-- Menu -->
    <ul class="header-nav-menulist">
        <li class="highlight search">
            
            
                
            
            
    <form method="get" action="/directory/" class="m-search-form">
    
        <input type="text" placeholder="Search for software or solutions" autocomplete="off" name="q" >
        
        <label >
            <input type="submit" class="bt" value="">
            


<svg  data-name="search" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1216 832q0-185-131.5-316.5t-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5 316.5-131.5 131.5-316.5zm512 832q0 52-38 90t-90 38q-54 0-90-38l-343-342q-179 124-399 124-143 0-273.5-55.5t-225-150-150-225-55.5-273.5 55.5-273.5 150-225 225-150 273.5-55.5 273.5 55.5 225 150 150 225 55.5 273.5q0 220-124 399l343 343q37 37 37 90z"/></svg>
        </label>
    </form>
        </li>
        
        <li class="highlight"><a href="/auth/">Join/Login</a></li>
        
        <li><a href="/software/">Business Software</a></li>
        <li><a href="/directory/">Open Source Software</a></li>
        <li><a  href="/software/vendors/" title="For Vendors">For Vendors</a></li>
        <li><a href="/blog/" title="Blog">Blog</a></li>
        <li><a href="/about">About</a></li>
        <li><a id="header-nav-more" data-toggle="header-nav-more header-nav-more-content" data-toggler=".toggled">More</a></li>
        <li>
            <ul id="header-nav-more-content" class="toggled" data-toggler=".toggled">
                
    

    
    
        <li><a href="/articles/">Articles</a></li>
    
    

    
 
                
                <li><a href="/create">Create</a></li>
                
                <li><a href="https://sourceforge.net/articles/category/sourceforge-podcast/">SourceForge Podcast</a></li>
                
                    <li><a href="https://sourceforge.net/p/forge/documentation/Docs%20Home/">Site Documentation</a></li>
                
                <li><a href="/user/newsletters">Subscribe to our Newsletter</a></li>
                <li><a href="/support">Support Request</a></li>
            </ul>
        </li>
    </ul>
</div>
<div class="off-canvas-content" data-off-canvas-content>

    




<script>
    SF.linkout_icon = '<svg  data-name="sf-linkout-icon" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 300 300" style="enable-background:new 0 0 300 300;" xml:space="preserve"><polygon class="st0" points="243.2,243.2 56.8,243.2 56.8,56.8 123,56.8 123,9 9,9 9,291 291,291 291,179.4 243.2,179 "/><polygon class="st0" points="128.5,213 155,186.5 176,165.5 206.7,196.3 235.5,132.5 248.9,102.6 290.6,9.8 291,9 290.6,9.2 197.4,51.1 169.1,63.8 103.7,93.3 137,126.5 115.9,147.5 89.5,174 "/></svg>';
</script>


<div class="l-header-nav  sandiego">

    <section class="sandiego l-header-nav-top show-for-large">
        <div class="row">
            <a href="/" title="Home" class="sf-logo">
                
    
    <img src="https://a.fsdn.com/con/images/sandiego/sf-logo-full.svg"  alt="SourceForge logo" class="sf-logo-full"/>
            </a>
            <nav class="links">
                
                <a href="/software/vendors/" title="For Vendors">For Vendors</a>
                
                
                    <a href="/support" title="Help">Help</a>
                    <a href="/create/" title="Create">Create</a>
                

                
                <a href="/user/registration" title="Join" >Join</a>
                <a href="/auth/" title="Login">Login</a>
                
            </nav>
        </div>
    </section>

    <section class="sandiego l-header-nav-top hide-for-large">
        <div class="row">
            <a href="/" title="Home" class="sf-logo">
                
    
    <img src="https://a.fsdn.com/con/images/sandiego/sf-logo-full.svg"  alt="SourceForge logo" class="sf-logo-full"/>
            </a>
            <div class="title-bar-right">
                <button type="button" aria-label="Toggle Main Menu" class="menu-icon" data-toggle="offCanvas"></button>
            </div>
        </div>
    </section>
    <section class="sandiego l-header-nav-bottom">
        <nav class="row">
            <a href="/" title="Home" class="sf-logo">
                
    
    <img src="https://a.fsdn.com/con/images/sandiego/sf-logo-full.svg"  alt="SourceForge logo" class="sf-logo-full"/>
            </a>
            <div class="links">
                
    
        <div class="nav-dropdown">
            <a href="/software/">Business Software</a>
            
        </div>
        <div class="nav-dropdown">
            <a href="/directory/" title="Browse">Open Source Software</a>
            
        </div>
        <div class="nav-dropdown">
            <a href="https://sourceforge.net/articles/category/sourceforge-podcast/">SourceForge Podcast</a>
        </div>
        <div class="nav-dropdown">
            <a>Resources</a>
            <ul class="nav-dropdown-menu">
                  <li><a href="/articles/">Articles</a></li>
                  
                  <li><a href="/software/case-studies/">Case Studies</a></li>
                  
                  <li><a href="/blog/">Blog</a></li>
            </ul>
        </div>
    

                <div class="dev-menu-when-stuck">
                    Menu
                    <ul class="dev-menu-dropdown header-nav-menulist">
                        <li><a href="/support">Help</a></li>
                        <li><a href="/create">Create</a></li>
                        <li><a href="/user/registration/" title="Join" >Join</a></li>
                        <li><a href="/auth/" title="Login">Login</a></li>
                    </ul>
                </div>
                <div class="search-toggle-when-stuck">
                    <a class="search-toggle">
                        


<svg  data-name="search" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1216 832q0-185-131.5-316.5t-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5 316.5-131.5 131.5-316.5zm512 832q0 52-38 90t-90 38q-54 0-90-38l-343-342q-179 124-399 124-143 0-273.5-55.5t-225-150-150-225-55.5-273.5 55.5-273.5 150-225 225-150 273.5-55.5 273.5 55.5 225 150 150 225 55.5 273.5q0 220-124 399l343 343q37 37 37 90z"/></svg>
                    </a>
                </div>
            </div>

            <div class="search">
                
                
    
    
        <div class="main-nav-link">
            
            
            <a href="https://nexo.com/fixed-term-savings?utm_source=sourceforge&amp;utm_medium=fixed&amp;utm_campaign=sourceforge_mb_sponsorship_earn_q225" rel="nofollow" target="_blank" id="main-nav-badge-link" data-label="nexo-april">
                <img src="https://a.fsdn.com/con/assets/maxnav/sourceforge/banner-300x32-cdfdb6c2.png"  srcset="https://a.fsdn.com/con/assets/maxnav/sourceforge/banner-600x64-cdfe1c16.png 2x"  alt="" id="main-nav-image"/>
            </a>
        </div>
    


                
                    
                
                
                
                
    <form method="get" action="/directory/" class="m-search-form">
    
    <div class="typeahead__container">
      <div class="typeahead__field">
        <div class="typeahead__query">
        
        <input type="text" placeholder="Search for software or solutions" autocomplete="off" name="q" >
        
        </div>
        
        <label >
            <input type="submit" class="bt" value="">
            


<svg  data-name="search" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1216 832q0-185-131.5-316.5t-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5 316.5-131.5 131.5-316.5zm512 832q0 52-38 90t-90 38q-54 0-90-38l-343-342q-179 124-399 124-143 0-273.5-55.5t-225-150-150-225-55.5-273.5 55.5-273.5 150-225 225-150 273.5-55.5 273.5 55.5 225 150 150 225 55.5 273.5q0 220-124 399l343 343q37 37 37 90z"/></svg>
        </label>
      </div>
    </div>
    
    </form>
                
            </div>
        </nav>
        
    </section>
    
</div>
    
    
    <div class="notification-on-project-page">
    
        
    
    
    
    </div>
    
    


    <section id="page-body" class=" neighborhood-Projects project-udt mountpoint-git 

">
        <div id="nav_menu_holder">
            
                
                    
    <div class="sandiego"> 
            
            
            
            
<section class="project-masthead"> 
    
    

    
<div class="backdrop" style="box-sizing: content-box; padding-bottom: 24px"></div>

    <div class="content">
    
        
    <nav id="breadcrumbs" class="breadcrumbs rtl">
        <ul itemscope itemtype="http://schema.org/BreadcrumbList">
            <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                <a itemprop="item" href="/"><span itemprop="name">Home</span></a>
                <meta itemprop="position" content="1"/>
            </li>
            <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                <a itemprop="item" href="/directory/"><span itemprop="name">Browse</span></a>
                <meta itemprop="position" content="2"/>
            </li>
            
            
                
                
            
            
                
            
            
                <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                    <a itemprop="item" href="/p/udt/"><span itemprop="name">udt</span></a>
                <meta itemprop="position" content="3"/>
                </li>
            
                <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                    <span itemprop="name">Git</span>
                <meta itemprop="position" content="4"/>
                </li>
            
        </ul>
    </nav>
    
    
    
        
                
                
<div class="overview">
    


<div class="project-icon   " >
    
    
    <img itemprop="image" alt="udt" title="udt" 
    
    
    src="https://a.fsdn.com/allura/p/udt/icon?1359381803"
    /></div>


    
    <div class="title "> 

        <meta itemprop="name" content="udt"/>
        <h1  >udt Git
        </h1>
        
            
            
          
        
            
            
            <div class="as-h3 brought-by">
                
                Brought to you by:
                
                    <a href="/u/lilyco/profile/">lilyco</a>
                    
                
            </div>
            
        

        

        
    </div>


    

</div>

                
                
    
  
            
            
        
    </div>
</section>

        </div>
    

                
            
        </div>
        <div id="top_nav" class="">
            
                
<div id="top_nav_admin">
<ul class="dropdown">
  
  
    <li class="">
        <a href="/projects/udt/" class="tool-summary-32" >
            Summary
        </a>
        
        
    </li>
  
    <li class="">
        <a href="/projects/udt/files/" class="tool-files-sf-32" >
            Files
        </a>
        
        
    </li>
  
    <li class="">
        <a href="/projects/udt/reviews/" class="tool-reviews-32" >
            Reviews
        </a>
        
        
    </li>
  
    <li class="">
        <a href="/projects/udt/support" class="tool-support-32" >
            Support
        </a>
        
        
    </li>
  
    <li class="">
        <a href="/p/udt/mailman/" class="tool-mailman-32" >
            Mailing Lists
        </a>
        
        
    </li>
  
    <li class="">
        <a href="/p/udt/_list/tickets" class="tool-tickets-32" >
            Tickets ▾
        </a>
        
        
            <ul>
                
                    <li class=""><a href="/p/udt/feature-requests/" >Feature Requests</a></li>
                
                    <li class=""><a href="/p/udt/patches/" >Patches</a></li>
                
                    <li class=""><a href="/p/udt/bugs/" >Bugs</a></li>
                
            </ul>
        
    </li>
  
    <li class="">
        <a href="/p/udt/news/" class="tool-blog-32" >
            News
        </a>
        
        
    </li>
  
    <li class="">
        <a href="/p/udt/discussion/" class="tool-discussion-32" >
            Discussion
        </a>
        
        
    </li>
  
    <li class="">
        <a href="/p/udt/code/" class="tool-cvs-32" >
            Code
        </a>
        
        
    </li>
  
    <li class="selected">
        <a href="/p/udt/git/" class="tool-git-32" >
            Git
        </a>
        
        
    </li>
  
  
</ul>
</div>


            
        </div>
        <div id="content_base">
            

    
                
                    
<a id="sidebar-activate" href="#">
    <span class="btn-label">Menu</span>
    <span class="btn-arrow-down">▾</span>
    <span class="btn-arrow-up">▴</span>
</a>

                        


<div id="sidebar">
  
    <div class="placeholder-no-searchbox">&nbsp;</div>
  
    
    
      
      
        
    
      <ul class="sidebarmenu">
      
    
  <li>
      
        <a class="icon" href="/p/udt/git/commit_browser" rel="nofollow" title="Browse Commits"><i class="fa fa-list"></i>
      
      <span>Browse Commits</span>
      </a>
  </li>
  
      
        
    
  <li>
      
        <a class="icon" href="/p/udt/git/fork" rel="nofollow" title="Fork"><i class="fa fa-code-fork"></i>
      
      <span>Fork</span>
      </a>
  </li>
  
      
        
    
  <li>
      
        <a href="/p/udt/git/merge-requests/"  rel="nofollow" >
      
      <span class="has_small">Merge Requests</span>
      <small>6</small></a>
  </li>
  
      
        
    
  <li>
      
        <a href="/p/udt/git/forks/"  rel="nofollow" >
      
      <span class="has_small">Forks</span>
      <small>11</small></a>
  </li>
  
      
        
    
      </ul>
      
    
    
      <h3 class="">Branches</h3>
    
  
      
        
    
      <ul class="sidebarmenu">
      
    
  <li>
      
        <a href="/p/udt/git/ci/master/tree/"  rel="nofollow" >
      
      <span>master</span>
      </a>
  </li>
  
      
    
    
      </ul>
      
    
    
</div>



<script>
$('#sidebar-admin-header').on('click', function(e){
    $("#sidebar-admin-menu").toggleClass("hidden");
    $(this).toggleClass("expanded");
    e.preventDefault();
});
</script>

                    

                    
                
                
                    
                
                <div class="grid-20 pad">
                    <h2 class="dark title">
                        <span>
<a href="/p/udt/git/ci/6b4216d8a4c9b8e1e9413ad6cf473f71e7b80502/" rel="nofollow">[6b4216]</a>:

  
      <a href="./../" rel="nofollow"><b class="fa fa-folder-open-o" title="Root directory"></b></a> /
  
  
    <a href="./" rel="nofollow">udt4</a> /
  
 draft-gg-udt-xx.txt
</span>
                        <!-- actions -->
                        <small>
                            

    
    <a class="icon" href="#" id="maximize-content" title="Maximize"><i class="fa fa-expand"></i>&nbsp;Maximize</a>
    <a class="icon" href="#" id="restore-content" title="Restore"><i class="fa fa-compress"></i>&nbsp;Restore</a>
<a class="icon" href="/p/udt/git/ci/6b4216d8a4c9b8e1e9413ad6cf473f71e7b80502/log/?path=/udt4/draft-gg-udt-xx.txt" rel="nofollow" title="History"><i class="fa fa-calendar"></i>&nbsp;History</a>

                        </small>
                        <!-- /actions -->
                    </h2>
                    
                    <div>
                        
  

                        
  
    <p><a rel="nofollow" href="?format=raw">Download this file</a></p>
    <div class="clip grid-19 codebrowser">
      <h3>
        1050 lines (724 with data), 43.2 kB
      </h3>
      
        <div class="codehilite"><table class="codehilitetable"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal">   1</span>
<span class="normal">   2</span>
<span class="normal">   3</span>
<span class="normal">   4</span>
<span class="normal">   5</span>
<span class="normal">   6</span>
<span class="normal">   7</span>
<span class="normal">   8</span>
<span class="normal">   9</span>
<span class="normal">  10</span>
<span class="normal">  11</span>
<span class="normal">  12</span>
<span class="normal">  13</span>
<span class="normal">  14</span>
<span class="normal">  15</span>
<span class="normal">  16</span>
<span class="normal">  17</span>
<span class="normal">  18</span>
<span class="normal">  19</span>
<span class="normal">  20</span>
<span class="normal">  21</span>
<span class="normal">  22</span>
<span class="normal">  23</span>
<span class="normal">  24</span>
<span class="normal">  25</span>
<span class="normal">  26</span>
<span class="normal">  27</span>
<span class="normal">  28</span>
<span class="normal">  29</span>
<span class="normal">  30</span>
<span class="normal">  31</span>
<span class="normal">  32</span>
<span class="normal">  33</span>
<span class="normal">  34</span>
<span class="normal">  35</span>
<span class="normal">  36</span>
<span class="normal">  37</span>
<span class="normal">  38</span>
<span class="normal">  39</span>
<span class="normal">  40</span>
<span class="normal">  41</span>
<span class="normal">  42</span>
<span class="normal">  43</span>
<span class="normal">  44</span>
<span class="normal">  45</span>
<span class="normal">  46</span>
<span class="normal">  47</span>
<span class="normal">  48</span>
<span class="normal">  49</span>
<span class="normal">  50</span>
<span class="normal">  51</span>
<span class="normal">  52</span>
<span class="normal">  53</span>
<span class="normal">  54</span>
<span class="normal">  55</span>
<span class="normal">  56</span>
<span class="normal">  57</span>
<span class="normal">  58</span>
<span class="normal">  59</span>
<span class="normal">  60</span>
<span class="normal">  61</span>
<span class="normal">  62</span>
<span class="normal">  63</span>
<span class="normal">  64</span>
<span class="normal">  65</span>
<span class="normal">  66</span>
<span class="normal">  67</span>
<span class="normal">  68</span>
<span class="normal">  69</span>
<span class="normal">  70</span>
<span class="normal">  71</span>
<span class="normal">  72</span>
<span class="normal">  73</span>
<span class="normal">  74</span>
<span class="normal">  75</span>
<span class="normal">  76</span>
<span class="normal">  77</span>
<span class="normal">  78</span>
<span class="normal">  79</span>
<span class="normal">  80</span>
<span class="normal">  81</span>
<span class="normal">  82</span>
<span class="normal">  83</span>
<span class="normal">  84</span>
<span class="normal">  85</span>
<span class="normal">  86</span>
<span class="normal">  87</span>
<span class="normal">  88</span>
<span class="normal">  89</span>
<span class="normal">  90</span>
<span class="normal">  91</span>
<span class="normal">  92</span>
<span class="normal">  93</span>
<span class="normal">  94</span>
<span class="normal">  95</span>
<span class="normal">  96</span>
<span class="normal">  97</span>
<span class="normal">  98</span>
<span class="normal">  99</span>
<span class="normal"> 100</span>
<span class="normal"> 101</span>
<span class="normal"> 102</span>
<span class="normal"> 103</span>
<span class="normal"> 104</span>
<span class="normal"> 105</span>
<span class="normal"> 106</span>
<span class="normal"> 107</span>
<span class="normal"> 108</span>
<span class="normal"> 109</span>
<span class="normal"> 110</span>
<span class="normal"> 111</span>
<span class="normal"> 112</span>
<span class="normal"> 113</span>
<span class="normal"> 114</span>
<span class="normal"> 115</span>
<span class="normal"> 116</span>
<span class="normal"> 117</span>
<span class="normal"> 118</span>
<span class="normal"> 119</span>
<span class="normal"> 120</span>
<span class="normal"> 121</span>
<span class="normal"> 122</span>
<span class="normal"> 123</span>
<span class="normal"> 124</span>
<span class="normal"> 125</span>
<span class="normal"> 126</span>
<span class="normal"> 127</span>
<span class="normal"> 128</span>
<span class="normal"> 129</span>
<span class="normal"> 130</span>
<span class="normal"> 131</span>
<span class="normal"> 132</span>
<span class="normal"> 133</span>
<span class="normal"> 134</span>
<span class="normal"> 135</span>
<span class="normal"> 136</span>
<span class="normal"> 137</span>
<span class="normal"> 138</span>
<span class="normal"> 139</span>
<span class="normal"> 140</span>
<span class="normal"> 141</span>
<span class="normal"> 142</span>
<span class="normal"> 143</span>
<span class="normal"> 144</span>
<span class="normal"> 145</span>
<span class="normal"> 146</span>
<span class="normal"> 147</span>
<span class="normal"> 148</span>
<span class="normal"> 149</span>
<span class="normal"> 150</span>
<span class="normal"> 151</span>
<span class="normal"> 152</span>
<span class="normal"> 153</span>
<span class="normal"> 154</span>
<span class="normal"> 155</span>
<span class="normal"> 156</span>
<span class="normal"> 157</span>
<span class="normal"> 158</span>
<span class="normal"> 159</span>
<span class="normal"> 160</span>
<span class="normal"> 161</span>
<span class="normal"> 162</span>
<span class="normal"> 163</span>
<span class="normal"> 164</span>
<span class="normal"> 165</span>
<span class="normal"> 166</span>
<span class="normal"> 167</span>
<span class="normal"> 168</span>
<span class="normal"> 169</span>
<span class="normal"> 170</span>
<span class="normal"> 171</span>
<span class="normal"> 172</span>
<span class="normal"> 173</span>
<span class="normal"> 174</span>
<span class="normal"> 175</span>
<span class="normal"> 176</span>
<span class="normal"> 177</span>
<span class="normal"> 178</span>
<span class="normal"> 179</span>
<span class="normal"> 180</span>
<span class="normal"> 181</span>
<span class="normal"> 182</span>
<span class="normal"> 183</span>
<span class="normal"> 184</span>
<span class="normal"> 185</span>
<span class="normal"> 186</span>
<span class="normal"> 187</span>
<span class="normal"> 188</span>
<span class="normal"> 189</span>
<span class="normal"> 190</span>
<span class="normal"> 191</span>
<span class="normal"> 192</span>
<span class="normal"> 193</span>
<span class="normal"> 194</span>
<span class="normal"> 195</span>
<span class="normal"> 196</span>
<span class="normal"> 197</span>
<span class="normal"> 198</span>
<span class="normal"> 199</span>
<span class="normal"> 200</span>
<span class="normal"> 201</span>
<span class="normal"> 202</span>
<span class="normal"> 203</span>
<span class="normal"> 204</span>
<span class="normal"> 205</span>
<span class="normal"> 206</span>
<span class="normal"> 207</span>
<span class="normal"> 208</span>
<span class="normal"> 209</span>
<span class="normal"> 210</span>
<span class="normal"> 211</span>
<span class="normal"> 212</span>
<span class="normal"> 213</span>
<span class="normal"> 214</span>
<span class="normal"> 215</span>
<span class="normal"> 216</span>
<span class="normal"> 217</span>
<span class="normal"> 218</span>
<span class="normal"> 219</span>
<span class="normal"> 220</span>
<span class="normal"> 221</span>
<span class="normal"> 222</span>
<span class="normal"> 223</span>
<span class="normal"> 224</span>
<span class="normal"> 225</span>
<span class="normal"> 226</span>
<span class="normal"> 227</span>
<span class="normal"> 228</span>
<span class="normal"> 229</span>
<span class="normal"> 230</span>
<span class="normal"> 231</span>
<span class="normal"> 232</span>
<span class="normal"> 233</span>
<span class="normal"> 234</span>
<span class="normal"> 235</span>
<span class="normal"> 236</span>
<span class="normal"> 237</span>
<span class="normal"> 238</span>
<span class="normal"> 239</span>
<span class="normal"> 240</span>
<span class="normal"> 241</span>
<span class="normal"> 242</span>
<span class="normal"> 243</span>
<span class="normal"> 244</span>
<span class="normal"> 245</span>
<span class="normal"> 246</span>
<span class="normal"> 247</span>
<span class="normal"> 248</span>
<span class="normal"> 249</span>
<span class="normal"> 250</span>
<span class="normal"> 251</span>
<span class="normal"> 252</span>
<span class="normal"> 253</span>
<span class="normal"> 254</span>
<span class="normal"> 255</span>
<span class="normal"> 256</span>
<span class="normal"> 257</span>
<span class="normal"> 258</span>
<span class="normal"> 259</span>
<span class="normal"> 260</span>
<span class="normal"> 261</span>
<span class="normal"> 262</span>
<span class="normal"> 263</span>
<span class="normal"> 264</span>
<span class="normal"> 265</span>
<span class="normal"> 266</span>
<span class="normal"> 267</span>
<span class="normal"> 268</span>
<span class="normal"> 269</span>
<span class="normal"> 270</span>
<span class="normal"> 271</span>
<span class="normal"> 272</span>
<span class="normal"> 273</span>
<span class="normal"> 274</span>
<span class="normal"> 275</span>
<span class="normal"> 276</span>
<span class="normal"> 277</span>
<span class="normal"> 278</span>
<span class="normal"> 279</span>
<span class="normal"> 280</span>
<span class="normal"> 281</span>
<span class="normal"> 282</span>
<span class="normal"> 283</span>
<span class="normal"> 284</span>
<span class="normal"> 285</span>
<span class="normal"> 286</span>
<span class="normal"> 287</span>
<span class="normal"> 288</span>
<span class="normal"> 289</span>
<span class="normal"> 290</span>
<span class="normal"> 291</span>
<span class="normal"> 292</span>
<span class="normal"> 293</span>
<span class="normal"> 294</span>
<span class="normal"> 295</span>
<span class="normal"> 296</span>
<span class="normal"> 297</span>
<span class="normal"> 298</span>
<span class="normal"> 299</span>
<span class="normal"> 300</span>
<span class="normal"> 301</span>
<span class="normal"> 302</span>
<span class="normal"> 303</span>
<span class="normal"> 304</span>
<span class="normal"> 305</span>
<span class="normal"> 306</span>
<span class="normal"> 307</span>
<span class="normal"> 308</span>
<span class="normal"> 309</span>
<span class="normal"> 310</span>
<span class="normal"> 311</span>
<span class="normal"> 312</span>
<span class="normal"> 313</span>
<span class="normal"> 314</span>
<span class="normal"> 315</span>
<span class="normal"> 316</span>
<span class="normal"> 317</span>
<span class="normal"> 318</span>
<span class="normal"> 319</span>
<span class="normal"> 320</span>
<span class="normal"> 321</span>
<span class="normal"> 322</span>
<span class="normal"> 323</span>
<span class="normal"> 324</span>
<span class="normal"> 325</span>
<span class="normal"> 326</span>
<span class="normal"> 327</span>
<span class="normal"> 328</span>
<span class="normal"> 329</span>
<span class="normal"> 330</span>
<span class="normal"> 331</span>
<span class="normal"> 332</span>
<span class="normal"> 333</span>
<span class="normal"> 334</span>
<span class="normal"> 335</span>
<span class="normal"> 336</span>
<span class="normal"> 337</span>
<span class="normal"> 338</span>
<span class="normal"> 339</span>
<span class="normal"> 340</span>
<span class="normal"> 341</span>
<span class="normal"> 342</span>
<span class="normal"> 343</span>
<span class="normal"> 344</span>
<span class="normal"> 345</span>
<span class="normal"> 346</span>
<span class="normal"> 347</span>
<span class="normal"> 348</span>
<span class="normal"> 349</span>
<span class="normal"> 350</span>
<span class="normal"> 351</span>
<span class="normal"> 352</span>
<span class="normal"> 353</span>
<span class="normal"> 354</span>
<span class="normal"> 355</span>
<span class="normal"> 356</span>
<span class="normal"> 357</span>
<span class="normal"> 358</span>
<span class="normal"> 359</span>
<span class="normal"> 360</span>
<span class="normal"> 361</span>
<span class="normal"> 362</span>
<span class="normal"> 363</span>
<span class="normal"> 364</span>
<span class="normal"> 365</span>
<span class="normal"> 366</span>
<span class="normal"> 367</span>
<span class="normal"> 368</span>
<span class="normal"> 369</span>
<span class="normal"> 370</span>
<span class="normal"> 371</span>
<span class="normal"> 372</span>
<span class="normal"> 373</span>
<span class="normal"> 374</span>
<span class="normal"> 375</span>
<span class="normal"> 376</span>
<span class="normal"> 377</span>
<span class="normal"> 378</span>
<span class="normal"> 379</span>
<span class="normal"> 380</span>
<span class="normal"> 381</span>
<span class="normal"> 382</span>
<span class="normal"> 383</span>
<span class="normal"> 384</span>
<span class="normal"> 385</span>
<span class="normal"> 386</span>
<span class="normal"> 387</span>
<span class="normal"> 388</span>
<span class="normal"> 389</span>
<span class="normal"> 390</span>
<span class="normal"> 391</span>
<span class="normal"> 392</span>
<span class="normal"> 393</span>
<span class="normal"> 394</span>
<span class="normal"> 395</span>
<span class="normal"> 396</span>
<span class="normal"> 397</span>
<span class="normal"> 398</span>
<span class="normal"> 399</span>
<span class="normal"> 400</span>
<span class="normal"> 401</span>
<span class="normal"> 402</span>
<span class="normal"> 403</span>
<span class="normal"> 404</span>
<span class="normal"> 405</span>
<span class="normal"> 406</span>
<span class="normal"> 407</span>
<span class="normal"> 408</span>
<span class="normal"> 409</span>
<span class="normal"> 410</span>
<span class="normal"> 411</span>
<span class="normal"> 412</span>
<span class="normal"> 413</span>
<span class="normal"> 414</span>
<span class="normal"> 415</span>
<span class="normal"> 416</span>
<span class="normal"> 417</span>
<span class="normal"> 418</span>
<span class="normal"> 419</span>
<span class="normal"> 420</span>
<span class="normal"> 421</span>
<span class="normal"> 422</span>
<span class="normal"> 423</span>
<span class="normal"> 424</span>
<span class="normal"> 425</span>
<span class="normal"> 426</span>
<span class="normal"> 427</span>
<span class="normal"> 428</span>
<span class="normal"> 429</span>
<span class="normal"> 430</span>
<span class="normal"> 431</span>
<span class="normal"> 432</span>
<span class="normal"> 433</span>
<span class="normal"> 434</span>
<span class="normal"> 435</span>
<span class="normal"> 436</span>
<span class="normal"> 437</span>
<span class="normal"> 438</span>
<span class="normal"> 439</span>
<span class="normal"> 440</span>
<span class="normal"> 441</span>
<span class="normal"> 442</span>
<span class="normal"> 443</span>
<span class="normal"> 444</span>
<span class="normal"> 445</span>
<span class="normal"> 446</span>
<span class="normal"> 447</span>
<span class="normal"> 448</span>
<span class="normal"> 449</span>
<span class="normal"> 450</span>
<span class="normal"> 451</span>
<span class="normal"> 452</span>
<span class="normal"> 453</span>
<span class="normal"> 454</span>
<span class="normal"> 455</span>
<span class="normal"> 456</span>
<span class="normal"> 457</span>
<span class="normal"> 458</span>
<span class="normal"> 459</span>
<span class="normal"> 460</span>
<span class="normal"> 461</span>
<span class="normal"> 462</span>
<span class="normal"> 463</span>
<span class="normal"> 464</span>
<span class="normal"> 465</span>
<span class="normal"> 466</span>
<span class="normal"> 467</span>
<span class="normal"> 468</span>
<span class="normal"> 469</span>
<span class="normal"> 470</span>
<span class="normal"> 471</span>
<span class="normal"> 472</span>
<span class="normal"> 473</span>
<span class="normal"> 474</span>
<span class="normal"> 475</span>
<span class="normal"> 476</span>
<span class="normal"> 477</span>
<span class="normal"> 478</span>
<span class="normal"> 479</span>
<span class="normal"> 480</span>
<span class="normal"> 481</span>
<span class="normal"> 482</span>
<span class="normal"> 483</span>
<span class="normal"> 484</span>
<span class="normal"> 485</span>
<span class="normal"> 486</span>
<span class="normal"> 487</span>
<span class="normal"> 488</span>
<span class="normal"> 489</span>
<span class="normal"> 490</span>
<span class="normal"> 491</span>
<span class="normal"> 492</span>
<span class="normal"> 493</span>
<span class="normal"> 494</span>
<span class="normal"> 495</span>
<span class="normal"> 496</span>
<span class="normal"> 497</span>
<span class="normal"> 498</span>
<span class="normal"> 499</span>
<span class="normal"> 500</span>
<span class="normal"> 501</span>
<span class="normal"> 502</span>
<span class="normal"> 503</span>
<span class="normal"> 504</span>
<span class="normal"> 505</span>
<span class="normal"> 506</span>
<span class="normal"> 507</span>
<span class="normal"> 508</span>
<span class="normal"> 509</span>
<span class="normal"> 510</span>
<span class="normal"> 511</span>
<span class="normal"> 512</span>
<span class="normal"> 513</span>
<span class="normal"> 514</span>
<span class="normal"> 515</span>
<span class="normal"> 516</span>
<span class="normal"> 517</span>
<span class="normal"> 518</span>
<span class="normal"> 519</span>
<span class="normal"> 520</span>
<span class="normal"> 521</span>
<span class="normal"> 522</span>
<span class="normal"> 523</span>
<span class="normal"> 524</span>
<span class="normal"> 525</span>
<span class="normal"> 526</span>
<span class="normal"> 527</span>
<span class="normal"> 528</span>
<span class="normal"> 529</span>
<span class="normal"> 530</span>
<span class="normal"> 531</span>
<span class="normal"> 532</span>
<span class="normal"> 533</span>
<span class="normal"> 534</span>
<span class="normal"> 535</span>
<span class="normal"> 536</span>
<span class="normal"> 537</span>
<span class="normal"> 538</span>
<span class="normal"> 539</span>
<span class="normal"> 540</span>
<span class="normal"> 541</span>
<span class="normal"> 542</span>
<span class="normal"> 543</span>
<span class="normal"> 544</span>
<span class="normal"> 545</span>
<span class="normal"> 546</span>
<span class="normal"> 547</span>
<span class="normal"> 548</span>
<span class="normal"> 549</span>
<span class="normal"> 550</span>
<span class="normal"> 551</span>
<span class="normal"> 552</span>
<span class="normal"> 553</span>
<span class="normal"> 554</span>
<span class="normal"> 555</span>
<span class="normal"> 556</span>
<span class="normal"> 557</span>
<span class="normal"> 558</span>
<span class="normal"> 559</span>
<span class="normal"> 560</span>
<span class="normal"> 561</span>
<span class="normal"> 562</span>
<span class="normal"> 563</span>
<span class="normal"> 564</span>
<span class="normal"> 565</span>
<span class="normal"> 566</span>
<span class="normal"> 567</span>
<span class="normal"> 568</span>
<span class="normal"> 569</span>
<span class="normal"> 570</span>
<span class="normal"> 571</span>
<span class="normal"> 572</span>
<span class="normal"> 573</span>
<span class="normal"> 574</span>
<span class="normal"> 575</span>
<span class="normal"> 576</span>
<span class="normal"> 577</span>
<span class="normal"> 578</span>
<span class="normal"> 579</span>
<span class="normal"> 580</span>
<span class="normal"> 581</span>
<span class="normal"> 582</span>
<span class="normal"> 583</span>
<span class="normal"> 584</span>
<span class="normal"> 585</span>
<span class="normal"> 586</span>
<span class="normal"> 587</span>
<span class="normal"> 588</span>
<span class="normal"> 589</span>
<span class="normal"> 590</span>
<span class="normal"> 591</span>
<span class="normal"> 592</span>
<span class="normal"> 593</span>
<span class="normal"> 594</span>
<span class="normal"> 595</span>
<span class="normal"> 596</span>
<span class="normal"> 597</span>
<span class="normal"> 598</span>
<span class="normal"> 599</span>
<span class="normal"> 600</span>
<span class="normal"> 601</span>
<span class="normal"> 602</span>
<span class="normal"> 603</span>
<span class="normal"> 604</span>
<span class="normal"> 605</span>
<span class="normal"> 606</span>
<span class="normal"> 607</span>
<span class="normal"> 608</span>
<span class="normal"> 609</span>
<span class="normal"> 610</span>
<span class="normal"> 611</span>
<span class="normal"> 612</span>
<span class="normal"> 613</span>
<span class="normal"> 614</span>
<span class="normal"> 615</span>
<span class="normal"> 616</span>
<span class="normal"> 617</span>
<span class="normal"> 618</span>
<span class="normal"> 619</span>
<span class="normal"> 620</span>
<span class="normal"> 621</span>
<span class="normal"> 622</span>
<span class="normal"> 623</span>
<span class="normal"> 624</span>
<span class="normal"> 625</span>
<span class="normal"> 626</span>
<span class="normal"> 627</span>
<span class="normal"> 628</span>
<span class="normal"> 629</span>
<span class="normal"> 630</span>
<span class="normal"> 631</span>
<span class="normal"> 632</span>
<span class="normal"> 633</span>
<span class="normal"> 634</span>
<span class="normal"> 635</span>
<span class="normal"> 636</span>
<span class="normal"> 637</span>
<span class="normal"> 638</span>
<span class="normal"> 639</span>
<span class="normal"> 640</span>
<span class="normal"> 641</span>
<span class="normal"> 642</span>
<span class="normal"> 643</span>
<span class="normal"> 644</span>
<span class="normal"> 645</span>
<span class="normal"> 646</span>
<span class="normal"> 647</span>
<span class="normal"> 648</span>
<span class="normal"> 649</span>
<span class="normal"> 650</span>
<span class="normal"> 651</span>
<span class="normal"> 652</span>
<span class="normal"> 653</span>
<span class="normal"> 654</span>
<span class="normal"> 655</span>
<span class="normal"> 656</span>
<span class="normal"> 657</span>
<span class="normal"> 658</span>
<span class="normal"> 659</span>
<span class="normal"> 660</span>
<span class="normal"> 661</span>
<span class="normal"> 662</span>
<span class="normal"> 663</span>
<span class="normal"> 664</span>
<span class="normal"> 665</span>
<span class="normal"> 666</span>
<span class="normal"> 667</span>
<span class="normal"> 668</span>
<span class="normal"> 669</span>
<span class="normal"> 670</span>
<span class="normal"> 671</span>
<span class="normal"> 672</span>
<span class="normal"> 673</span>
<span class="normal"> 674</span>
<span class="normal"> 675</span>
<span class="normal"> 676</span>
<span class="normal"> 677</span>
<span class="normal"> 678</span>
<span class="normal"> 679</span>
<span class="normal"> 680</span>
<span class="normal"> 681</span>
<span class="normal"> 682</span>
<span class="normal"> 683</span>
<span class="normal"> 684</span>
<span class="normal"> 685</span>
<span class="normal"> 686</span>
<span class="normal"> 687</span>
<span class="normal"> 688</span>
<span class="normal"> 689</span>
<span class="normal"> 690</span>
<span class="normal"> 691</span>
<span class="normal"> 692</span>
<span class="normal"> 693</span>
<span class="normal"> 694</span>
<span class="normal"> 695</span>
<span class="normal"> 696</span>
<span class="normal"> 697</span>
<span class="normal"> 698</span>
<span class="normal"> 699</span>
<span class="normal"> 700</span>
<span class="normal"> 701</span>
<span class="normal"> 702</span>
<span class="normal"> 703</span>
<span class="normal"> 704</span>
<span class="normal"> 705</span>
<span class="normal"> 706</span>
<span class="normal"> 707</span>
<span class="normal"> 708</span>
<span class="normal"> 709</span>
<span class="normal"> 710</span>
<span class="normal"> 711</span>
<span class="normal"> 712</span>
<span class="normal"> 713</span>
<span class="normal"> 714</span>
<span class="normal"> 715</span>
<span class="normal"> 716</span>
<span class="normal"> 717</span>
<span class="normal"> 718</span>
<span class="normal"> 719</span>
<span class="normal"> 720</span>
<span class="normal"> 721</span>
<span class="normal"> 722</span>
<span class="normal"> 723</span>
<span class="normal"> 724</span>
<span class="normal"> 725</span>
<span class="normal"> 726</span>
<span class="normal"> 727</span>
<span class="normal"> 728</span>
<span class="normal"> 729</span>
<span class="normal"> 730</span>
<span class="normal"> 731</span>
<span class="normal"> 732</span>
<span class="normal"> 733</span>
<span class="normal"> 734</span>
<span class="normal"> 735</span>
<span class="normal"> 736</span>
<span class="normal"> 737</span>
<span class="normal"> 738</span>
<span class="normal"> 739</span>
<span class="normal"> 740</span>
<span class="normal"> 741</span>
<span class="normal"> 742</span>
<span class="normal"> 743</span>
<span class="normal"> 744</span>
<span class="normal"> 745</span>
<span class="normal"> 746</span>
<span class="normal"> 747</span>
<span class="normal"> 748</span>
<span class="normal"> 749</span>
<span class="normal"> 750</span>
<span class="normal"> 751</span>
<span class="normal"> 752</span>
<span class="normal"> 753</span>
<span class="normal"> 754</span>
<span class="normal"> 755</span>
<span class="normal"> 756</span>
<span class="normal"> 757</span>
<span class="normal"> 758</span>
<span class="normal"> 759</span>
<span class="normal"> 760</span>
<span class="normal"> 761</span>
<span class="normal"> 762</span>
<span class="normal"> 763</span>
<span class="normal"> 764</span>
<span class="normal"> 765</span>
<span class="normal"> 766</span>
<span class="normal"> 767</span>
<span class="normal"> 768</span>
<span class="normal"> 769</span>
<span class="normal"> 770</span>
<span class="normal"> 771</span>
<span class="normal"> 772</span>
<span class="normal"> 773</span>
<span class="normal"> 774</span>
<span class="normal"> 775</span>
<span class="normal"> 776</span>
<span class="normal"> 777</span>
<span class="normal"> 778</span>
<span class="normal"> 779</span>
<span class="normal"> 780</span>
<span class="normal"> 781</span>
<span class="normal"> 782</span>
<span class="normal"> 783</span>
<span class="normal"> 784</span>
<span class="normal"> 785</span>
<span class="normal"> 786</span>
<span class="normal"> 787</span>
<span class="normal"> 788</span>
<span class="normal"> 789</span>
<span class="normal"> 790</span>
<span class="normal"> 791</span>
<span class="normal"> 792</span>
<span class="normal"> 793</span>
<span class="normal"> 794</span>
<span class="normal"> 795</span>
<span class="normal"> 796</span>
<span class="normal"> 797</span>
<span class="normal"> 798</span>
<span class="normal"> 799</span>
<span class="normal"> 800</span>
<span class="normal"> 801</span>
<span class="normal"> 802</span>
<span class="normal"> 803</span>
<span class="normal"> 804</span>
<span class="normal"> 805</span>
<span class="normal"> 806</span>
<span class="normal"> 807</span>
<span class="normal"> 808</span>
<span class="normal"> 809</span>
<span class="normal"> 810</span>
<span class="normal"> 811</span>
<span class="normal"> 812</span>
<span class="normal"> 813</span>
<span class="normal"> 814</span>
<span class="normal"> 815</span>
<span class="normal"> 816</span>
<span class="normal"> 817</span>
<span class="normal"> 818</span>
<span class="normal"> 819</span>
<span class="normal"> 820</span>
<span class="normal"> 821</span>
<span class="normal"> 822</span>
<span class="normal"> 823</span>
<span class="normal"> 824</span>
<span class="normal"> 825</span>
<span class="normal"> 826</span>
<span class="normal"> 827</span>
<span class="normal"> 828</span>
<span class="normal"> 829</span>
<span class="normal"> 830</span>
<span class="normal"> 831</span>
<span class="normal"> 832</span>
<span class="normal"> 833</span>
<span class="normal"> 834</span>
<span class="normal"> 835</span>
<span class="normal"> 836</span>
<span class="normal"> 837</span>
<span class="normal"> 838</span>
<span class="normal"> 839</span>
<span class="normal"> 840</span>
<span class="normal"> 841</span>
<span class="normal"> 842</span>
<span class="normal"> 843</span>
<span class="normal"> 844</span>
<span class="normal"> 845</span>
<span class="normal"> 846</span>
<span class="normal"> 847</span>
<span class="normal"> 848</span>
<span class="normal"> 849</span>
<span class="normal"> 850</span>
<span class="normal"> 851</span>
<span class="normal"> 852</span>
<span class="normal"> 853</span>
<span class="normal"> 854</span>
<span class="normal"> 855</span>
<span class="normal"> 856</span>
<span class="normal"> 857</span>
<span class="normal"> 858</span>
<span class="normal"> 859</span>
<span class="normal"> 860</span>
<span class="normal"> 861</span>
<span class="normal"> 862</span>
<span class="normal"> 863</span>
<span class="normal"> 864</span>
<span class="normal"> 865</span>
<span class="normal"> 866</span>
<span class="normal"> 867</span>
<span class="normal"> 868</span>
<span class="normal"> 869</span>
<span class="normal"> 870</span>
<span class="normal"> 871</span>
<span class="normal"> 872</span>
<span class="normal"> 873</span>
<span class="normal"> 874</span>
<span class="normal"> 875</span>
<span class="normal"> 876</span>
<span class="normal"> 877</span>
<span class="normal"> 878</span>
<span class="normal"> 879</span>
<span class="normal"> 880</span>
<span class="normal"> 881</span>
<span class="normal"> 882</span>
<span class="normal"> 883</span>
<span class="normal"> 884</span>
<span class="normal"> 885</span>
<span class="normal"> 886</span>
<span class="normal"> 887</span>
<span class="normal"> 888</span>
<span class="normal"> 889</span>
<span class="normal"> 890</span>
<span class="normal"> 891</span>
<span class="normal"> 892</span>
<span class="normal"> 893</span>
<span class="normal"> 894</span>
<span class="normal"> 895</span>
<span class="normal"> 896</span>
<span class="normal"> 897</span>
<span class="normal"> 898</span>
<span class="normal"> 899</span>
<span class="normal"> 900</span>
<span class="normal"> 901</span>
<span class="normal"> 902</span>
<span class="normal"> 903</span>
<span class="normal"> 904</span>
<span class="normal"> 905</span>
<span class="normal"> 906</span>
<span class="normal"> 907</span>
<span class="normal"> 908</span>
<span class="normal"> 909</span>
<span class="normal"> 910</span>
<span class="normal"> 911</span>
<span class="normal"> 912</span>
<span class="normal"> 913</span>
<span class="normal"> 914</span>
<span class="normal"> 915</span>
<span class="normal"> 916</span>
<span class="normal"> 917</span>
<span class="normal"> 918</span>
<span class="normal"> 919</span>
<span class="normal"> 920</span>
<span class="normal"> 921</span>
<span class="normal"> 922</span>
<span class="normal"> 923</span>
<span class="normal"> 924</span>
<span class="normal"> 925</span>
<span class="normal"> 926</span>
<span class="normal"> 927</span>
<span class="normal"> 928</span>
<span class="normal"> 929</span>
<span class="normal"> 930</span>
<span class="normal"> 931</span>
<span class="normal"> 932</span>
<span class="normal"> 933</span>
<span class="normal"> 934</span>
<span class="normal"> 935</span>
<span class="normal"> 936</span>
<span class="normal"> 937</span>
<span class="normal"> 938</span>
<span class="normal"> 939</span>
<span class="normal"> 940</span>
<span class="normal"> 941</span>
<span class="normal"> 942</span>
<span class="normal"> 943</span>
<span class="normal"> 944</span>
<span class="normal"> 945</span>
<span class="normal"> 946</span>
<span class="normal"> 947</span>
<span class="normal"> 948</span>
<span class="normal"> 949</span>
<span class="normal"> 950</span>
<span class="normal"> 951</span>
<span class="normal"> 952</span>
<span class="normal"> 953</span>
<span class="normal"> 954</span>
<span class="normal"> 955</span>
<span class="normal"> 956</span>
<span class="normal"> 957</span>
<span class="normal"> 958</span>
<span class="normal"> 959</span>
<span class="normal"> 960</span>
<span class="normal"> 961</span>
<span class="normal"> 962</span>
<span class="normal"> 963</span>
<span class="normal"> 964</span>
<span class="normal"> 965</span>
<span class="normal"> 966</span>
<span class="normal"> 967</span>
<span class="normal"> 968</span>
<span class="normal"> 969</span>
<span class="normal"> 970</span>
<span class="normal"> 971</span>
<span class="normal"> 972</span>
<span class="normal"> 973</span>
<span class="normal"> 974</span>
<span class="normal"> 975</span>
<span class="normal"> 976</span>
<span class="normal"> 977</span>
<span class="normal"> 978</span>
<span class="normal"> 979</span>
<span class="normal"> 980</span>
<span class="normal"> 981</span>
<span class="normal"> 982</span>
<span class="normal"> 983</span>
<span class="normal"> 984</span>
<span class="normal"> 985</span>
<span class="normal"> 986</span>
<span class="normal"> 987</span>
<span class="normal"> 988</span>
<span class="normal"> 989</span>
<span class="normal"> 990</span>
<span class="normal"> 991</span>
<span class="normal"> 992</span>
<span class="normal"> 993</span>
<span class="normal"> 994</span>
<span class="normal"> 995</span>
<span class="normal"> 996</span>
<span class="normal"> 997</span>
<span class="normal"> 998</span>
<span class="normal"> 999</span>
<span class="normal">1000</span>
<span class="normal">1001</span>
<span class="normal">1002</span>
<span class="normal">1003</span>
<span class="normal">1004</span>
<span class="normal">1005</span>
<span class="normal">1006</span>
<span class="normal">1007</span>
<span class="normal">1008</span>
<span class="normal">1009</span>
<span class="normal">1010</span>
<span class="normal">1011</span>
<span class="normal">1012</span>
<span class="normal">1013</span>
<span class="normal">1014</span>
<span class="normal">1015</span>
<span class="normal">1016</span>
<span class="normal">1017</span>
<span class="normal">1018</span>
<span class="normal">1019</span>
<span class="normal">1020</span>
<span class="normal">1021</span>
<span class="normal">1022</span>
<span class="normal">1023</span>
<span class="normal">1024</span>
<span class="normal">1025</span>
<span class="normal">1026</span>
<span class="normal">1027</span>
<span class="normal">1028</span>
<span class="normal">1029</span>
<span class="normal">1030</span>
<span class="normal">1031</span>
<span class="normal">1032</span>
<span class="normal">1033</span>
<span class="normal">1034</span>
<span class="normal">1035</span>
<span class="normal">1036</span>
<span class="normal">1037</span>
<span class="normal">1038</span>
<span class="normal">1039</span>
<span class="normal">1040</span>
<span class="normal">1041</span>
<span class="normal">1042</span>
<span class="normal">1043</span>
<span class="normal">1044</span>
<span class="normal">1045</span>
<span class="normal">1046</span>
<span class="normal">1047</span>
<span class="normal">1048</span>
<span class="normal">1049</span>
<span class="normal">1050</span>
<span class="normal">1051</span>
<span class="normal">1052</span>
<span class="normal">1053</span>
<span class="normal">1054</span>
<span class="normal">1055</span>
<span class="normal">1056</span>
<span class="normal">1057</span>
<span class="normal">1058</span>
<span class="normal">1059</span>
<span class="normal">1060</span>
<span class="normal">1061</span>
<span class="normal">1062</span>
<span class="normal">1063</span>
<span class="normal">1064</span></pre></div></td><td class="code"><div><pre><div id="l1" class="code_block"> 
</div><div id="l2" class="code_block">         
</div><div id="l3" class="code_block">   Internet Engineering Task Force                           Yunhong Gu 
</div><div id="l4" class="code_block">   Internet Draft                     University of Illinois at Chicago 
</div><div id="l5" class="code_block">   Intended status: Informational                        April 12, 2010 
</div><div id="l6" class="code_block">   Expires: October 12, 2010                                            
</div><div id="l7" class="code_block">    
</div><div id="l8" class="code_block">    
</div><div id="l9" class="code_block">                   UDT: UDP-based Data Transfer Protocol 
</div><div id="l10" class="code_block">                            draft-gg-udt-03.txt 
</div><div id="l11" class="code_block">    
</div><div id="l12" class="code_block">Status of this Memo 
</div><div id="l13" class="code_block">    
</div><div id="l14" class="code_block">   This Internet-Draft is submitted to IETF in full conformance with the   
</div><div id="l15" class="code_block">   provisions of BCP 78 and BCP 79. 
</div><div id="l16" class="code_block">    
</div><div id="l17" class="code_block">   Internet-Drafts are working documents of the Internet Engineering 
</div><div id="l18" class="code_block">   Task Force (IETF), its areas, and its working groups.  Note that 
</div><div id="l19" class="code_block">   other groups may also distribute working documents as Internet-
</div><div id="l20" class="code_block">   Drafts. 
</div><div id="l21" class="code_block">    
</div><div id="l22" class="code_block">   Internet-Drafts are draft documents valid for a maximum of six months 
</div><div id="l23" class="code_block">   and may be updated, replaced, or obsoleted by other documents at any 
</div><div id="l24" class="code_block">   time.  It is inappropriate to use Internet-Drafts as reference 
</div><div id="l25" class="code_block">   material or to cite them other than as &quot;work in progress.&quot; 
</div><div id="l26" class="code_block">    
</div><div id="l27" class="code_block">   The list of current Internet-Drafts can be accessed at 
</div><div id="l28" class="code_block">   http://www.ietf.org/ietf/1id-abstracts.txt. 
</div><div id="l29" class="code_block">    
</div><div id="l30" class="code_block">   The list of Internet-Draft Shadow Directories can be accessed at 
</div><div id="l31" class="code_block">   http://www.ietf.org/shadow.html. 
</div><div id="l32" class="code_block">    
</div><div id="l33" class="code_block">   This Internet-Draft will expire on October 15, 2010. 
</div><div id="l34" class="code_block">    
</div><div id="l35" class="code_block">Copyright Notice 
</div><div id="l36" class="code_block"> 
</div><div id="l37" class="code_block">   Copyright (c) 2010 IETF Trust and the persons identified as the 
</div><div id="l38" class="code_block">   document authors.  All rights reserved. 
</div><div id="l39" class="code_block">    
</div><div id="l40" class="code_block">   This document is subject to BCP 78 and the IETF Trust&#39;s Legal 
</div><div id="l41" class="code_block">   Provisions Relating to IETF Documents 
</div><div id="l42" class="code_block">   (http://trustee.ietf.org/license-info) in effect on the date of 
</div><div id="l43" class="code_block">   publication of this document.  Please review these documents 
</div><div id="l44" class="code_block">   carefully, as they describe your rights and restrictions with respect 
</div><div id="l45" class="code_block">   to this document. 
</div><div id="l46" class="code_block">    
</div><div id="l47" class="code_block">Abstract 
</div><div id="l48" class="code_block">    
</div><div id="l49" class="code_block">   This document describes UDT, or the UDP based Data Transfer protocol. 
</div><div id="l50" class="code_block">   UDT is designed to be an alternative data transfer protocol for the 
</div><div id="l51" class="code_block">   situations when TCP does not work well. One of the most common cases, 
</div><div id="l52" class="code_block">   and also the original motivation of UDT, is to overcome TCP&#39;s 
</div><div id="l53" class="code_block"> 
</div><div id="l54" class="code_block"> 
</div><div id="l55" class="code_block">Yunhong Gu            Expires - October 12, 2010              [Page 1] 
</div><div id="l56" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l57" class="code_block"> 
</div><div id="l58" class="code_block"> 
</div><div id="l59" class="code_block">   inefficiency in high bandwidth-delay product (BDP) networks. Another 
</div><div id="l60" class="code_block">   important target use scenario is to allow networking researchers, 
</div><div id="l61" class="code_block">   students, and application developers to easily implement and deploy 
</div><div id="l62" class="code_block">   new data transfer algorithms and protocols. Furthermore, UDT can also 
</div><div id="l63" class="code_block">   be used to better support firewall traversing. 
</div><div id="l64" class="code_block">    
</div><div id="l65" class="code_block">   UDT is completely built on top of UDP. However, UDT is connection 
</div><div id="l66" class="code_block">   oriented, unicast, and duplex. It supports both reliable data 
</div><div id="l67" class="code_block">   streaming and partial reliable messaging. The congestion control 
</div><div id="l68" class="code_block">   module is an open framework that can be used to implement and/or 
</div><div id="l69" class="code_block">   deploy different control algorithms. UDT also has a native/default 
</div><div id="l70" class="code_block">   control algorithm based on AIMD rate control. 
</div><div id="l71" class="code_block">
</div><div id="l72" class="code_block">
</div><div id="l73" class="code_block">
</div><div id="l74" class="code_block">
</div><div id="l75" class="code_block">
</div><div id="l76" class="code_block">
</div><div id="l77" class="code_block">
</div><div id="l78" class="code_block">
</div><div id="l79" class="code_block">
</div><div id="l80" class="code_block">
</div><div id="l81" class="code_block">
</div><div id="l82" class="code_block">
</div><div id="l83" class="code_block">
</div><div id="l84" class="code_block">
</div><div id="l85" class="code_block">
</div><div id="l86" class="code_block">
</div><div id="l87" class="code_block">
</div><div id="l88" class="code_block">
</div><div id="l89" class="code_block">
</div><div id="l90" class="code_block">
</div><div id="l91" class="code_block">
</div><div id="l92" class="code_block">
</div><div id="l93" class="code_block">
</div><div id="l94" class="code_block">
</div><div id="l95" class="code_block">
</div><div id="l96" class="code_block">
</div><div id="l97" class="code_block">
</div><div id="l98" class="code_block">
</div><div id="l99" class="code_block">
</div><div id="l100" class="code_block">
</div><div id="l101" class="code_block">
</div><div id="l102" class="code_block">
</div><div id="l103" class="code_block">
</div><div id="l104" class="code_block">
</div><div id="l105" class="code_block">
</div><div id="l106" class="code_block">
</div><div id="l107" class="code_block">
</div><div id="l108" class="code_block"> 
</div><div id="l109" class="code_block"> 
</div><div id="l110" class="code_block">Yunhong Gu            Expires - October 12, 2010              [Page 2] 
</div><div id="l111" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l112" class="code_block"> 
</div><div id="l113" class="code_block"> 
</div><div id="l114" class="code_block">Table of Contents 
</div><div id="l115" class="code_block">    
</div><div id="l116" class="code_block">   1. Introduction...................................................4 
</div><div id="l117" class="code_block">   2. Packet Structures..............................................5 
</div><div id="l118" class="code_block">   3. UDP Multiplexer................................................8 
</div><div id="l119" class="code_block">   4. Timers.........................................................8 
</div><div id="l120" class="code_block">   5. Connection Setup and shutdown..................................9 
</div><div id="l121" class="code_block">      5.1 Client/Server Connection Setup............................10 
</div><div id="l122" class="code_block">      5.2 Rendezvous Connection Setup...............................10 
</div><div id="l123" class="code_block">      5.3 Shutdown..................................................11 
</div><div id="l124" class="code_block">   6. Data Sending and Receiving....................................11 
</div><div id="l125" class="code_block">      6.1 The Sender&#39;s Algorithm....................................11 
</div><div id="l126" class="code_block">      6.2 The Receiver&#39;s Algorithm..................................12 
</div><div id="l127" class="code_block">      6.3 Flow Control..............................................15 
</div><div id="l128" class="code_block">      6.4 Loss Information Compression Scheme.......................15 
</div><div id="l129" class="code_block">   7. Configurable Congestion Control (CCC).........................15 
</div><div id="l130" class="code_block">      7.1 CCC Interface.............................................15 
</div><div id="l131" class="code_block">      7.2 UDT&#39;s Native Control Algorithm............................16 
</div><div id="l132" class="code_block">   Security Considerations..........................................18 
</div><div id="l133" class="code_block">   Normative References.............................................18 
</div><div id="l134" class="code_block">   Informative References...........................................18 
</div><div id="l135" class="code_block">   Author&#39;s Addresses...............................................19 
</div><div id="l136" class="code_block">    
</div><div id="l137" class="code_block">
</div><div id="l138" class="code_block">
</div><div id="l139" class="code_block">
</div><div id="l140" class="code_block">
</div><div id="l141" class="code_block">
</div><div id="l142" class="code_block">
</div><div id="l143" class="code_block">
</div><div id="l144" class="code_block">
</div><div id="l145" class="code_block">
</div><div id="l146" class="code_block">
</div><div id="l147" class="code_block">
</div><div id="l148" class="code_block">
</div><div id="l149" class="code_block">
</div><div id="l150" class="code_block">
</div><div id="l151" class="code_block">
</div><div id="l152" class="code_block">
</div><div id="l153" class="code_block">
</div><div id="l154" class="code_block">
</div><div id="l155" class="code_block">
</div><div id="l156" class="code_block">
</div><div id="l157" class="code_block">
</div><div id="l158" class="code_block">
</div><div id="l159" class="code_block">
</div><div id="l160" class="code_block">
</div><div id="l161" class="code_block">
</div><div id="l162" class="code_block">
</div><div id="l163" class="code_block"> 
</div><div id="l164" class="code_block"> 
</div><div id="l165" class="code_block">Yunhong Gu            Expires - October 12, 2010              [Page 3] 
</div><div id="l166" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l167" class="code_block"> 
</div><div id="l168" class="code_block">         
</div><div id="l169" class="code_block">1. 
</div><div id="l170" class="code_block"> Introduction 
</div><div id="l171" class="code_block">    
</div><div id="l172" class="code_block">   The Transmission Control Protocol (TCP) [RFC5681] has been very 
</div><div id="l173" class="code_block">   successful and greatly contributes to the popularity of today&#39;s 
</div><div id="l174" class="code_block">   Internet. Today TCP still contributes the majority of the traffic on 
</div><div id="l175" class="code_block">   the Internet. 
</div><div id="l176" class="code_block">    
</div><div id="l177" class="code_block">   However, TCP is not perfect and it is not designed for every specific 
</div><div id="l178" class="code_block">   applications. In the last several years, with the rapid advance of 
</div><div id="l179" class="code_block">   optical networks and rich Internet applications, TCP has been found 
</div><div id="l180" class="code_block">   inefficient as the network bandwidth-delay product (BDP) increases. 
</div><div id="l181" class="code_block">   Its AIMD (additive increase multiplicative decrease) algorithm 
</div><div id="l182" class="code_block">   reduces the TCP congestion window drastically but fails to recover it 
</div><div id="l183" class="code_block">   to the available bandwidth quickly. Theoretical flow level analysis 
</div><div id="l184" class="code_block">   has shown that TCP becomes more vulnerable to packet loss as the BDP 
</div><div id="l185" class="code_block">   increases higher [LM97]. 
</div><div id="l186" class="code_block">    
</div><div id="l187" class="code_block">   To overcome the TCP&#39;s inefficiency problem over high speed wide area 
</div><div id="l188" class="code_block">   networks is the original motivation of UDT. Although there are new 
</div><div id="l189" class="code_block">   TCP variants deployed today (for example, BiC TCP [XHR04] on Linux 
</div><div id="l190" class="code_block">   and Compound TCP [TS06] on Windows), certain problems still exist. 
</div><div id="l191" class="code_block">   For example, none of the new TCP variants address RTT unfairness, the 
</div><div id="l192" class="code_block">   situation that connections with shorter RTT consume more bandwidth. 
</div><div id="l193" class="code_block">    
</div><div id="l194" class="code_block">   Moreover, as the Internet continues to evolve, new challenges and 
</div><div id="l195" class="code_block">   requirements to the transport protocol will always emerge. 
</div><div id="l196" class="code_block">   Researchers need a platform to rapidly develop and test new 
</div><div id="l197" class="code_block">   algorithms and protocols. Network researchers and students can use 
</div><div id="l198" class="code_block">   UDT to easily implement their ideas on transport protocols, in 
</div><div id="l199" class="code_block">   particular congestion control algorithms, and conduct experiments 
</div><div id="l200" class="code_block">   over real networks. 
</div><div id="l201" class="code_block">    
</div><div id="l202" class="code_block">   Finally, there are other situations when UDT can be found more 
</div><div id="l203" class="code_block">   helpful than TCP. For example, UDP-based protocol is usually easier 
</div><div id="l204" class="code_block">   for punching NAT firewalls. For another example, TCP&#39;s congestion 
</div><div id="l205" class="code_block">   control and reliability control is not desirable in certain 
</div><div id="l206" class="code_block">   applications of VOIP, wireless communication, etc. Application 
</div><div id="l207" class="code_block">   developers can use (with or without modification) UDT to suit their 
</div><div id="l208" class="code_block">   requirements. 
</div><div id="l209" class="code_block">    
</div><div id="l210" class="code_block">   Due to all those reasons and motivations described above, we believe 
</div><div id="l211" class="code_block">   that it is necessary to design a well defined and developed UDP-based 
</div><div id="l212" class="code_block">   data transfer protocol. 
</div><div id="l213" class="code_block">    
</div><div id="l214" class="code_block">   As its name suggest, UDT is built solely on the top of UDP [RFC768]. 
</div><div id="l215" class="code_block">   Both data and control packets are transferred using UDP. UDT is 
</div><div id="l216" class="code_block">   connection-oriented in order to easily maintain congestion control, 
</div><div id="l217" class="code_block">   reliability, and security. It is a unicast protocol while multicast 
</div><div id="l218" class="code_block">   is not considered here. Finally, data can be transferred over UDT in 
</div><div id="l219" class="code_block"> 
</div><div id="l220" class="code_block"> 
</div><div id="l221" class="code_block">Yunhong Gu            Expires - October 12, 2010              [Page 4] 
</div><div id="l222" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l223" class="code_block"> 
</div><div id="l224" class="code_block"> 
</div><div id="l225" class="code_block">   duplex. 
</div><div id="l226" class="code_block">    
</div><div id="l227" class="code_block">   UDT supports both reliable data streaming and partial reliable 
</div><div id="l228" class="code_block">   messaging. The data streaming semantics is similar to that of TCP, 
</div><div id="l229" class="code_block">   while the messaging semantics can be regarded as a subset of SCTP 
</div><div id="l230" class="code_block">   [RFC4960]. 
</div><div id="l231" class="code_block">    
</div><div id="l232" class="code_block">   This document defines UDT&#39;s protocol specification. The detailed 
</div><div id="l233" class="code_block">   description and performance analysis can be found in [GG07], and a 
</div><div id="l234" class="code_block">   fully functional reference implementation can be found at [UDT]. 
</div><div id="l235" class="code_block">    
</div><div id="l236" class="code_block">2. 
</div><div id="l237" class="code_block"> Packet Structures 
</div><div id="l238" class="code_block">    
</div><div id="l239" class="code_block">   UDT has two kinds of packets: the data packets and the control 
</div><div id="l240" class="code_block">   packets. They are distinguished by the 1st bit (flag bit) of the 
</div><div id="l241" class="code_block">   packet header. 
</div><div id="l242" class="code_block">    
</div><div id="l243" class="code_block">   The data packet header structure is as following. 
</div><div id="l244" class="code_block">    
</div><div id="l245" class="code_block">   0                   1                   2                   3 
</div><div id="l246" class="code_block">   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
</div><div id="l247" class="code_block">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
</div><div id="l248" class="code_block">   |0|                     Packet Sequence Number                  | 
</div><div id="l249" class="code_block">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
</div><div id="l250" class="code_block">   |FF |O|                     Message Number                      | 
</div><div id="l251" class="code_block">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
</div><div id="l252" class="code_block">   |                          Time Stamp                           | 
</div><div id="l253" class="code_block">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
</div><div id="l254" class="code_block">   |                    Destination Socket ID                      | 
</div><div id="l255" class="code_block">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
</div><div id="l256" class="code_block">    
</div><div id="l257" class="code_block">   The data packet header starts with 0. Packet sequence number uses the 
</div><div id="l258" class="code_block">   following 31 bits after the flag bit. UDT uses packet based 
</div><div id="l259" class="code_block">   sequencing, i.e., the sequence number is increased by 1 for each sent 
</div><div id="l260" class="code_block">   data packet in the order of packet sending. Sequence number is 
</div><div id="l261" class="code_block">   wrapped after it is increased to the maximum number (2^31 - 1). 
</div><div id="l262" class="code_block">    
</div><div id="l263" class="code_block">   The next 32-bit field in the header is for the messaging. The first 
</div><div id="l264" class="code_block">   two bits &quot;FF&quot; flags the position of the packet is a message. &quot;10&quot; is 
</div><div id="l265" class="code_block">   the first packet, &quot;01&quot; is the last one, &quot;11&quot; is the only packet, and 
</div><div id="l266" class="code_block">   &quot;00&quot; is any packets in the middle. The third bit &quot;O&quot; means if the 
</div><div id="l267" class="code_block">   message should be delivered in order (1) or not (0). A message to be 
</div><div id="l268" class="code_block">   delivered in order requires that all previous messages must be either 
</div><div id="l269" class="code_block">   delivered or dropped. The rest 29 bits is the message number, similar 
</div><div id="l270" class="code_block">   to packet sequence number (but independent). A UDT message may 
</div><div id="l271" class="code_block">   contain multiple UDT packets. 
</div><div id="l272" class="code_block">    
</div><div id="l273" class="code_block">   Following are the 32-bit time stamp when the packet is sent and the 
</div><div id="l274" class="code_block">   destination socket ID. The time stamp is a relative value starting 
</div><div id="l275" class="code_block"> 
</div><div id="l276" class="code_block"> 
</div><div id="l277" class="code_block">Yunhong Gu            Expires - October 12, 2010              [Page 5] 
</div><div id="l278" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l279" class="code_block"> 
</div><div id="l280" class="code_block"> 
</div><div id="l281" class="code_block">   from the time when the connection is set up. The time stamp 
</div><div id="l282" class="code_block">   information is not required by UDT or its native control algorithm. 
</div><div id="l283" class="code_block">   It is included only in case that a user defined control algorithm may 
</div><div id="l284" class="code_block">   require the information (See Section 6). 
</div><div id="l285" class="code_block">    
</div><div id="l286" class="code_block">   The Destination ID is used for UDP multiplexer. Multiple UDT socket 
</div><div id="l287" class="code_block">   can be bound on the same UDP port and this UDT socket ID is used to 
</div><div id="l288" class="code_block">   differentiate the UDT connections. 
</div><div id="l289" class="code_block">    
</div><div id="l290" class="code_block">   If the flag bit of a UDT packet is 1, then it is a control packet and 
</div><div id="l291" class="code_block">   parsed according to the following structure. 
</div><div id="l292" class="code_block">    
</div><div id="l293" class="code_block">   0                   1                   2                   3 
</div><div id="l294" class="code_block">   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
</div><div id="l295" class="code_block">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
</div><div id="l296" class="code_block">   |1|             Type            |            Reserved           | 
</div><div id="l297" class="code_block">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
</div><div id="l298" class="code_block">   |     |                    Additional Info                      | 
</div><div id="l299" class="code_block">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
</div><div id="l300" class="code_block">   |                            Time Stamp                         | 
</div><div id="l301" class="code_block">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
</div><div id="l302" class="code_block">   |                    Destination Socket ID                      | 
</div><div id="l303" class="code_block">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
</div><div id="l304" class="code_block">   |                                                               | 
</div><div id="l305" class="code_block">   ~                 Control Information Field                     ~ 
</div><div id="l306" class="code_block">   |                                                               | 
</div><div id="l307" class="code_block">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
</div><div id="l308" class="code_block">    
</div><div id="l309" class="code_block">   There are 8 types of control packets in UDT and the type information 
</div><div id="l310" class="code_block">   is put in bit field 1 - 15 of the header. The contents of the 
</div><div id="l311" class="code_block">   following fields depend on the packet type. The first 128 bits must 
</div><div id="l312" class="code_block">   exist in the packet header, whereas there may be an empty control 
</div><div id="l313" class="code_block">   information field, depending on the packet type. 
</div><div id="l314" class="code_block">    
</div><div id="l315" class="code_block">   Particularly, UDT uses sub-sequencing for ACK packet. Each ACK packet 
</div><div id="l316" class="code_block">   is assigned a unique increasing 16-bit sequence number, which is 
</div><div id="l317" class="code_block">   independent of the data packet sequence number. The ACK sequence 
</div><div id="l318" class="code_block">   number uses bits 32 - 63 (&quot;Additional Info&quot;) in the control packet 
</div><div id="l319" class="code_block">   header. The ACK sequence number ranges from 0 to (2^31 - 1). 
</div><div id="l320" class="code_block">    
</div><div id="l321" class="code_block">   TYPE 0x0:  Protocol Connection Handshake 
</div><div id="l322" class="code_block">              Additional Info: Undefined 
</div><div id="l323" class="code_block">              Control Info: 
</div><div id="l324" class="code_block">              1) 32 bits: UDT version 
</div><div id="l325" class="code_block">              2) 32 bits: Socket Type (STREAM or DGRAM) 
</div><div id="l326" class="code_block">              3) 32 bits: initial packet sequence number 
</div><div id="l327" class="code_block">              4) 32 bits: maximum packet size (including UDP/IP headers) 
</div><div id="l328" class="code_block">              5) 32 bits: maximum flow window size  
</div><div id="l329" class="code_block">              6) 32 bits: connection type (regular or rendezvous)  
</div><div id="l330" class="code_block"> 
</div><div id="l331" class="code_block"> 
</div><div id="l332" class="code_block">Yunhong Gu            Expires - October 12, 2010              [Page 6] 
</div><div id="l333" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l334" class="code_block"> 
</div><div id="l335" class="code_block"> 
</div><div id="l336" class="code_block">              7) 32 bits: socket ID 
</div><div id="l337" class="code_block">              8) 32 bits: SYN cookie 
</div><div id="l338" class="code_block">              9) 128 bits: the IP address of the peer&#39;s UDP socket  
</div><div id="l339" class="code_block">    
</div><div id="l340" class="code_block">   TYPE 0x1:  Keep-alive 
</div><div id="l341" class="code_block">              Additional Info: Undefined 
</div><div id="l342" class="code_block">              Control Info: None 
</div><div id="l343" class="code_block">    
</div><div id="l344" class="code_block">   TYPE 0x2:  Acknowledgement (ACK) 
</div><div id="l345" class="code_block">              Additional Info: ACK sequence number 
</div><div id="l346" class="code_block">              Control Info: 
</div><div id="l347" class="code_block">              1) 32 bits: The packet sequence number to which all the 
</div><div id="l348" class="code_block">                 previous packets have been received (excluding) 
</div><div id="l349" class="code_block">              [The following fields are optional] 
</div><div id="l350" class="code_block">              2) 32 bits: RTT (in microseconds) 
</div><div id="l351" class="code_block">              3) 32 bits: RTT variance 
</div><div id="l352" class="code_block">              4) 32 bits: Available buffer size (in bytes) 
</div><div id="l353" class="code_block">              5) 32 bits: Packets receiving rate (in number of packets  
</div><div id="l354" class="code_block">                          per second) 
</div><div id="l355" class="code_block">              6) 32 bits: Estimated link capacity (in number of packets  
</div><div id="l356" class="code_block">                          per second) 
</div><div id="l357" class="code_block">    
</div><div id="l358" class="code_block">   TYPE 0x3:  Negative Acknowledgement (NAK) 
</div><div id="l359" class="code_block">              Additional Info: Undefined 
</div><div id="l360" class="code_block">              Control Info: 
</div><div id="l361" class="code_block">              1) 32 bits integer array of compressed loss information  
</div><div id="l362" class="code_block">                 (see section 3.9). 
</div><div id="l363" class="code_block">    
</div><div id="l364" class="code_block">   TYPE 0x4:  Unused 
</div><div id="l365" class="code_block">    
</div><div id="l366" class="code_block">   TYPE 0x5:  Shutdown 
</div><div id="l367" class="code_block">              Additional Info: Undefined 
</div><div id="l368" class="code_block">              Control Info: None 
</div><div id="l369" class="code_block">    
</div><div id="l370" class="code_block">   TYPE 0x6:  Acknowledgement of Acknowledgement (ACK2) 
</div><div id="l371" class="code_block">              Additional Info: ACK sequence number 
</div><div id="l372" class="code_block">              Control Info: None 
</div><div id="l373" class="code_block">    
</div><div id="l374" class="code_block">   TYPE 0x7:  Message Drop Request: 
</div><div id="l375" class="code_block">              Additional Info: Message ID 
</div><div id="l376" class="code_block">              Control Info: 
</div><div id="l377" class="code_block">              1) 32 bits: First sequence number in the message 
</div><div id="l378" class="code_block">              2) 32 bits: Last sequence number in the message 
</div><div id="l379" class="code_block">    
</div><div id="l380" class="code_block">   TYPE 0x7FFF: Explained by bits 16 - 31, reserved for user defined 
</div><div id="l381" class="code_block">              Control Packet 
</div><div id="l382" class="code_block">    
</div><div id="l383" class="code_block">   Finally, Time Stamp and Destination Socket ID also exist in the 
</div><div id="l384" class="code_block">   control packets. 
</div><div id="l385" class="code_block"> 
</div><div id="l386" class="code_block"> 
</div><div id="l387" class="code_block">Yunhong Gu            Expires - October 12, 2010              [Page 7] 
</div><div id="l388" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l389" class="code_block"> 
</div><div id="l390" class="code_block"> 
</div><div id="l391" class="code_block">    
</div><div id="l392" class="code_block">3. 
</div><div id="l393" class="code_block"> UDP Multiplexer 
</div><div id="l394" class="code_block"> 
</div><div id="l395" class="code_block">   A UDP multiplexer is used to handle concurrent UDT connections 
</div><div id="l396" class="code_block">   sharing the same UDP port. The multiplexer dispatch incoming UDT 
</div><div id="l397" class="code_block">   packets to the corresponding UDT sockets according to the destination 
</div><div id="l398" class="code_block">   socket ID in the packet header. 
</div><div id="l399" class="code_block">    
</div><div id="l400" class="code_block">   One multiplexer is used for all UDT connections bound to the same UDP 
</div><div id="l401" class="code_block">   port. That is, UDT sockets on different UDP port will be handled by 
</div><div id="l402" class="code_block">   different multiplexers. 
</div><div id="l403" class="code_block">    
</div><div id="l404" class="code_block">   A multiplexer maintains two queues. The sending queue includes the 
</div><div id="l405" class="code_block">   sockets with at least one packet scheduled for sending. The UDT 
</div><div id="l406" class="code_block">   sockets in the sending queue are ordered by the next packet sending 
</div><div id="l407" class="code_block">   time. A high performance timer is maintained by the sending queue and 
</div><div id="l408" class="code_block">   when it is time for the first socket in the queue to send its packet, 
</div><div id="l409" class="code_block">   the packet will be sent and the socket will be removed. If there are 
</div><div id="l410" class="code_block">   more packets for that socket to be sent, the socket will be re-
</div><div id="l411" class="code_block">   inserted to the queue. 
</div><div id="l412" class="code_block">    
</div><div id="l413" class="code_block">   The receiving queue reads incoming packets and dispatches them to the 
</div><div id="l414" class="code_block">   corresponding sockets. If the destination ID is 0, the packet will be 
</div><div id="l415" class="code_block">   sent to the listening socket (if there is any), or to a socket that 
</div><div id="l416" class="code_block">   is in rendezvous connection phase. (See Section 5.) 
</div><div id="l417" class="code_block">    
</div><div id="l418" class="code_block">   Similar to the sending queue, the receiving queue also maintains a 
</div><div id="l419" class="code_block">   list of sockets waiting for incoming packets. The receiving queue 
</div><div id="l420" class="code_block">   scans the list to check if any timer expires for each socket every 
</div><div id="l421" class="code_block">   SYN (SYN = 0.01 second, defined in Section 4). 
</div><div id="l422" class="code_block">    
</div><div id="l423" class="code_block">4. 
</div><div id="l424" class="code_block"> Timers 
</div><div id="l425" class="code_block">    
</div><div id="l426" class="code_block">   UDT uses four timers to trigger different periodical events. Each 
</div><div id="l427" class="code_block">   event has its own period and they are all independent. They use the 
</div><div id="l428" class="code_block">   system time as origins and should process wrapping if the system time 
</div><div id="l429" class="code_block">   wraps.  
</div><div id="l430" class="code_block">    
</div><div id="l431" class="code_block">   For a certain periodical event E in UDT, suppose the time variable is 
</div><div id="l432" class="code_block">   ET and its period is p. If E is set or reset at system time t0 (ET = 
</div><div id="l433" class="code_block">   t0), then at any time t1, (t1 - ET &gt;= p) is the condition to check if 
</div><div id="l434" class="code_block">   E should be triggered. 
</div><div id="l435" class="code_block">    
</div><div id="l436" class="code_block">   The four timers are ACK, NAK, EXP and SND. SND is used in the sender 
</div><div id="l437" class="code_block">   only for rate-based packet sending (see Section 6.1), whereas the 
</div><div id="l438" class="code_block">   other three are used in the receiver only. 
</div><div id="l439" class="code_block">    
</div><div id="l440" class="code_block">   ACK is used to trigger an acknowledgement (ACK). Its period is set by 
</div><div id="l441" class="code_block">   the congestion control module. However, UDT will send an ACK no 
</div><div id="l442" class="code_block"> 
</div><div id="l443" class="code_block"> 
</div><div id="l444" class="code_block">Yunhong Gu            Expires - October 12, 2010              [Page 8] 
</div><div id="l445" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l446" class="code_block"> 
</div><div id="l447" class="code_block"> 
</div><div id="l448" class="code_block">   longer than every 0.01 second, even though the congestion control 
</div><div id="l449" class="code_block">   does not need timer-based ACK. Here, 0.01 second is defined as the 
</div><div id="l450" class="code_block">   SYN time, or synchronization time, and it affects many of the other 
</div><div id="l451" class="code_block">   timers used in UDT. 
</div><div id="l452" class="code_block">    
</div><div id="l453" class="code_block">   NAK is used to trigger a negative acknowledgement (NAK). Its period 
</div><div id="l454" class="code_block">   is dynamically updated to 4 * RTT_+ RTTVar + SYN, where RTTVar is the 
</div><div id="l455" class="code_block">   variance of RTT samples. 
</div><div id="l456" class="code_block">    
</div><div id="l457" class="code_block">   EXP is used to trigger data packets retransmission and maintain 
</div><div id="l458" class="code_block">   connection status. Its period is dynamically updated to N * (4 * RTT 
</div><div id="l459" class="code_block">   + RTTVar + SYN), where N is the number of continuous timeouts. To 
</div><div id="l460" class="code_block">   avoid unnecessary timeout, a minimum threshold (e.g., 0.5 second) 
</div><div id="l461" class="code_block">   should be used in the implementation. 
</div><div id="l462" class="code_block">    
</div><div id="l463" class="code_block">   The recommended granularity of their periods is microseconds. 
</div><div id="l464" class="code_block">   However, accurate time keeping is not necessary, except for SND.  
</div><div id="l465" class="code_block">    
</div><div id="l466" class="code_block">   In the rest of this document, a name of a time variable will be used 
</div><div id="l467" class="code_block">   to represent the associated event, the variable itself, or the value 
</div><div id="l468" class="code_block">   of its period, depending on the context. For example, ACK can mean 
</div><div id="l469" class="code_block">   either the ACK event or the value of ACK period. 
</div><div id="l470" class="code_block">    
</div><div id="l471" class="code_block">5. 
</div><div id="l472" class="code_block"> Connection Setup and shutdown 
</div><div id="l473" class="code_block">    
</div><div id="l474" class="code_block">   UDT supports two different connection setup methods, the traditional 
</div><div id="l475" class="code_block">   client/server mode and the rendezvous mode. In the latter mode, both 
</div><div id="l476" class="code_block">   UDT sockets connect to each other at (approximately) the same time. 
</div><div id="l477" class="code_block">    
</div><div id="l478" class="code_block">   The UDT client (in rendezvous mode, both peer are clients) sends a 
</div><div id="l479" class="code_block">   handshake request (type 0 control packet) to the server or the peer 
</div><div id="l480" class="code_block">   side. The handshake packet has the following information (suppose UDT 
</div><div id="l481" class="code_block">   socket A sends this handshake to B): 
</div><div id="l482" class="code_block">     1) UDT version: this value is for compatibility purpose. The 
</div><div id="l483" class="code_block">        current version is 4. 
</div><div id="l484" class="code_block">     2) Socket Type: STREAM (0) or DGRAM (1). 
</div><div id="l485" class="code_block">     3) Initial Sequence Number: It is the sequence number for the first 
</div><div id="l486" class="code_block">        data packet that A will send out. This should be a random value. 
</div><div id="l487" class="code_block">     4) Packet Size: the maximum size of a data packet (including all 
</div><div id="l488" class="code_block">        headers). This is usually the value of MTU. 
</div><div id="l489" class="code_block">     5) Maximum Flow Window Size: This value may not be necessary; 
</div><div id="l490" class="code_block">        however, it is needed in the current reference implementation. 
</div><div id="l491" class="code_block">     6) Connection Type. This information is used to differential the 
</div><div id="l492" class="code_block">        connection setup modes and request/response. 
</div><div id="l493" class="code_block">     7) Socket ID. The client UDT socket ID. 
</div><div id="l494" class="code_block">     8) Cookie. This is a cookie value used to avoid SYN flooding attack 
</div><div id="l495" class="code_block">        [RFC4987]. 
</div><div id="l496" class="code_block">     9) Peer IP address: B&#39;s IP address. 
</div><div id="l497" class="code_block">    
</div><div id="l498" class="code_block"> 
</div><div id="l499" class="code_block"> 
</div><div id="l500" class="code_block">Yunhong Gu            Expires - October 12, 2010              [Page 9] 
</div><div id="l501" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l502" class="code_block"> 
</div><div id="l503" class="code_block"> 
</div><div id="l504" class="code_block">5.1 
</div><div id="l505" class="code_block">  Client/Server Connection Setup 
</div><div id="l506" class="code_block">    
</div><div id="l507" class="code_block">   One UDT entity starts first as the server (listener). The server 
</div><div id="l508" class="code_block">   accepts and processes incoming connection request, and creates new 
</div><div id="l509" class="code_block">   UDT socket for each new connection. 
</div><div id="l510" class="code_block">    
</div><div id="l511" class="code_block">   A client that wants to connect to the server will send a handshake 
</div><div id="l512" class="code_block">   packet first. The client should keep on sending the handshake packet 
</div><div id="l513" class="code_block">   every constant interval until it receives a response handshake from 
</div><div id="l514" class="code_block">   the server or a timeout timer expires. 
</div><div id="l515" class="code_block">    
</div><div id="l516" class="code_block">   When the server first receives the connection request from a client, 
</div><div id="l517" class="code_block">   it generates a cookie value according to the client address and a 
</div><div id="l518" class="code_block">   secret key and sends it back to the client. The client must then send 
</div><div id="l519" class="code_block">   back the same cookie to the server. 
</div><div id="l520" class="code_block">    
</div><div id="l521" class="code_block">   The server, when receiving a handshake packet and the correct cookie, 
</div><div id="l522" class="code_block">   compares the packet size and maximum window size with its own values 
</div><div id="l523" class="code_block">   and set its own values as the smaller ones. The result values are 
</div><div id="l524" class="code_block">   also sent back to the client by a response handshake packet, together 
</div><div id="l525" class="code_block">   with the server&#39;s version and initial sequence number. The server is 
</div><div id="l526" class="code_block">   ready for sending/receiving data right after this step is finished. 
</div><div id="l527" class="code_block">   However, it must send back response packet as long as it receives any 
</div><div id="l528" class="code_block">   further handshakes from the same client. 
</div><div id="l529" class="code_block">    
</div><div id="l530" class="code_block">   The client can start sending/receiving data once it gets a response 
</div><div id="l531" class="code_block">   handshake packet from the server. Further response handshake 
</div><div id="l532" class="code_block">   messages, if received any, should be omitted. 
</div><div id="l533" class="code_block">    
</div><div id="l534" class="code_block">   The connection type from the client should be set to 1 and the 
</div><div id="l535" class="code_block">   response from the server should be set to -1. 
</div><div id="l536" class="code_block">    
</div><div id="l537" class="code_block">   The client should also check if the response is from the server that 
</div><div id="l538" class="code_block">   the original request was sent to. 
</div><div id="l539" class="code_block">    
</div><div id="l540" class="code_block">5.2 
</div><div id="l541" class="code_block">  Rendezvous Connection Setup 
</div><div id="l542" class="code_block">    
</div><div id="l543" class="code_block">   In this mode, both clients send a connect request to each other at 
</div><div id="l544" class="code_block">   the same time. The initial connection type is set to 0. Once a peer 
</div><div id="l545" class="code_block">   receives a connection request, it sends back a response. If the 
</div><div id="l546" class="code_block">   connection type is 0, then the response sends back -1; if the 
</div><div id="l547" class="code_block">   connection type is -1, then the response sends back -2; No response 
</div><div id="l548" class="code_block">   will be sent for -2 request. 
</div><div id="l549" class="code_block">    
</div><div id="l550" class="code_block">   The rendezvous peer does the same check on the handshake messages 
</div><div id="l551" class="code_block">   (version, packet size, window size, etc.) as described in Section 
</div><div id="l552" class="code_block">   5.1. In addition, the peer only process the connection request from 
</div><div id="l553" class="code_block">   the address it has sent a connection request to. Finally, rendezvous 
</div><div id="l554" class="code_block">   connection should be rejected by a regular UDT server (listener). 
</div><div id="l555" class="code_block"> 
</div><div id="l556" class="code_block"> 
</div><div id="l557" class="code_block">Yunhong Gu            Expires - October 12, 2010             [Page 10] 
</div><div id="l558" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l559" class="code_block"> 
</div><div id="l560" class="code_block"> 
</div><div id="l561" class="code_block">    
</div><div id="l562" class="code_block">   A peer initializes the connection when it receives -1 response. 
</div><div id="l563" class="code_block">    
</div><div id="l564" class="code_block">   The rendezvous connection setup is useful when both peers are behind 
</div><div id="l565" class="code_block">   firewalls. It can also provide better security and usability when a 
</div><div id="l566" class="code_block">   listening server is not desirable. 
</div><div id="l567" class="code_block">    
</div><div id="l568" class="code_block">5.3 
</div><div id="l569" class="code_block">   Shutdown 
</div><div id="l570" class="code_block">    
</div><div id="l571" class="code_block">   If one of the connected UDT entities is being closed, it will send a 
</div><div id="l572" class="code_block">   shutdown message to the peer side. The peer side, after received this 
</div><div id="l573" class="code_block">   message, will also be closed. This shutdown message, delivered using 
</div><div id="l574" class="code_block">   UDP, is only sent once and not guaranteed to be received. If the 
</div><div id="l575" class="code_block">   message is not received, the peer side will be closed after 16 
</div><div id="l576" class="code_block">   continuous EXP timeout (see section 3.5). However, the total timeout 
</div><div id="l577" class="code_block">   value should be between a minimum threshold and a maximum threshold. 
</div><div id="l578" class="code_block">   In our reference implementation, we use 3 seconds and 30 seconds, 
</div><div id="l579" class="code_block">   respectively. 
</div><div id="l580" class="code_block">    
</div><div id="l581" class="code_block">6. 
</div><div id="l582" class="code_block"> Data Sending and Receiving 
</div><div id="l583" class="code_block"> 
</div><div id="l584" class="code_block">   Each UDT entity has two logical parts: the sender and the receiver. 
</div><div id="l585" class="code_block">   The sender sends (and retransmits) application data according to the 
</div><div id="l586" class="code_block">   flow control and congestion control. The receiver receives both data 
</div><div id="l587" class="code_block">   packets and control packets, and sends out control packets according 
</div><div id="l588" class="code_block">   to the received packets and the timers. 
</div><div id="l589" class="code_block">    
</div><div id="l590" class="code_block">   The receiver is responsible for triggering and processing all control 
</div><div id="l591" class="code_block">   events, including congestion control and reliability control, and 
</div><div id="l592" class="code_block">   their related mechanisms. 
</div><div id="l593" class="code_block">    
</div><div id="l594" class="code_block">   UDT always tries to pack application data into fixed size packets 
</div><div id="l595" class="code_block">   (the maximum packet size negotiated during connection setup), unless 
</div><div id="l596" class="code_block">   there is not enough data to be sent. 
</div><div id="l597" class="code_block">    
</div><div id="l598" class="code_block">   We explained the rationale of some of the UDT data sending/receiving 
</div><div id="l599" class="code_block">   schemes in [GHG04b]. 
</div><div id="l600" class="code_block"> 
</div><div id="l601" class="code_block">6.1 
</div><div id="l602" class="code_block">  The Sender&#39;s Algorithm 
</div><div id="l603" class="code_block">    
</div><div id="l604" class="code_block">   Data Structures and Variables: 
</div><div id="l605" class="code_block">    
</div><div id="l606" class="code_block">   1) Sender&#39;s Loss List: The sender&#39;s loss list is used to store the 
</div><div id="l607" class="code_block">      sequence numbers of the lost packets fed back by the receiver 
</div><div id="l608" class="code_block">      through NAK packets or inserted in a timeout event. The numbers 
</div><div id="l609" class="code_block">      are stored in increasing order. 
</div><div id="l610" class="code_block">    
</div><div id="l611" class="code_block">   Data Sending Algorithm: 
</div><div id="l612" class="code_block">   1) If the sender&#39;s loss list is not empty, retransmit the first 
</div><div id="l613" class="code_block"> 
</div><div id="l614" class="code_block"> 
</div><div id="l615" class="code_block">Yunhong Gu            Expires - October 12, 2010             [Page 11] 
</div><div id="l616" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l617" class="code_block"> 
</div><div id="l618" class="code_block"> 
</div><div id="l619" class="code_block">      packet in the list and remove it from the list. Go to 5). 
</div><div id="l620" class="code_block">   2) In messaging mode, if the packets has been the loss list for a 
</div><div id="l621" class="code_block">      time more than the application specified TTL (time-to-live), send 
</div><div id="l622" class="code_block">      a message drop request and remove all related packets from the 
</div><div id="l623" class="code_block">      loss list. Go to 1). 
</div><div id="l624" class="code_block">   3) Wait until there is application data to be sent. 
</div><div id="l625" class="code_block">   4)  
</div><div id="l626" class="code_block">        a. If the number of unacknowledged packets exceeds the 
</div><div id="l627" class="code_block">           flow/congestion window size, wait until an ACK comes. Go to 
</div><div id="l628" class="code_block">           1). 
</div><div id="l629" class="code_block">        b. Pack a new data packet and send it out. 
</div><div id="l630" class="code_block">   5) If the sequence number of the current packet is 16n, where n is an 
</div><div id="l631" class="code_block">      integer, go to 2). 
</div><div id="l632" class="code_block">   6) Wait (SND - t) time, where SND is the inter-packet interval 
</div><div id="l633" class="code_block">      updated by congestion control and t is the total time used by step 
</div><div id="l634" class="code_block">      1 to step 5. Go to 1).  
</div><div id="l635" class="code_block">    
</div><div id="l636" class="code_block">6.2 
</div><div id="l637" class="code_block">  The Receiver&#39;s Algorithm 
</div><div id="l638" class="code_block">    
</div><div id="l639" class="code_block">   Data Structures and Variables: 
</div><div id="l640" class="code_block">    
</div><div id="l641" class="code_block">   1) Receiver&#39;s Loss List: It is a list of tuples whose values include: 
</div><div id="l642" class="code_block">      the sequence numbers of detected lost data packets, the latest 
</div><div id="l643" class="code_block">      feedback time of each tuple, and a parameter k that is the number 
</div><div id="l644" class="code_block">      of times each one has been fed back in NAK. Values are stored in 
</div><div id="l645" class="code_block">      the increasing order of packet sequence numbers. 
</div><div id="l646" class="code_block">   2) ACK History Window: A circular array of each sent ACK and the time 
</div><div id="l647" class="code_block">      it is sent out. The most recent value will overwrite the oldest 
</div><div id="l648" class="code_block">      one if no more free space in the array. 
</div><div id="l649" class="code_block">   3) PKT History Window: A circular array that records the arrival time 
</div><div id="l650" class="code_block">      of each data packet. 
</div><div id="l651" class="code_block">   4) Packet Pair Window: A circular array that records the time 
</div><div id="l652" class="code_block">      interval between each probing packet pair. 
</div><div id="l653" class="code_block">   5) LRSN: A variable to record the largest received data packet 
</div><div id="l654" class="code_block">      sequence number. LRSN is initialized to the initial sequence 
</div><div id="l655" class="code_block">      number minus 1. 
</div><div id="l656" class="code_block">   6) ExpCount: A variable to record number of continuous EXP time-out 
</div><div id="l657" class="code_block">      events. 
</div><div id="l658" class="code_block">    
</div><div id="l659" class="code_block">   Data Receiving Algorithm: 
</div><div id="l660" class="code_block">   1) Query the system time to check if ACK, NAK, or EXP timer has 
</div><div id="l661" class="code_block">      expired. If there is any, process the event (as described below 
</div><div id="l662" class="code_block">      in this section) and reset the associated time variables. For 
</div><div id="l663" class="code_block">      ACK, also check the ACK packet interval. 
</div><div id="l664" class="code_block">   2) Start time bounded UDP receiving. If no packet arrives, go to 1). 
</div><div id="l665" class="code_block">   3) Reset the ExpCount to 1. If there is no unacknowledged data 
</div><div id="l666" class="code_block">      packet, or if this is an ACK or NAK control packet, reset the EXP 
</div><div id="l667" class="code_block">      timer. 
</div><div id="l668" class="code_block">   4) Check the flag bit of the packet header. If it is a control 
</div><div id="l669" class="code_block"> 
</div><div id="l670" class="code_block"> 
</div><div id="l671" class="code_block">Yunhong Gu            Expires - October 12, 2010             [Page 12] 
</div><div id="l672" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l673" class="code_block"> 
</div><div id="l674" class="code_block"> 
</div><div id="l675" class="code_block">      packet, process it according to its type and go to 1). 
</div><div id="l676" class="code_block">   5) If the sequence number of the current data packet is 16n + 1, 
</div><div id="l677" class="code_block">      where n is an integer, record the time interval between this 
</div><div id="l678" class="code_block">      packet and the last data packet in the Packet Pair Window. 
</div><div id="l679" class="code_block">   6) Record the packet arrival time in PKT History Window. 
</div><div id="l680" class="code_block">   7)  
</div><div id="l681" class="code_block">        a. If the sequence number of the current data packet is greater 
</div><div id="l682" class="code_block">           than LRSN + 1, put all the sequence numbers between (but 
</div><div id="l683" class="code_block">           excluding) these two values into the receiver&#39;s loss list and 
</div><div id="l684" class="code_block">           send them to the sender in an NAK packet. 
</div><div id="l685" class="code_block">        b. If the sequence number is less than LRSN, remove it from the 
</div><div id="l686" class="code_block">           receiver&#39;s loss list. 
</div><div id="l687" class="code_block">   8) Update LRSN. Go to 1). 
</div><div id="l688" class="code_block">    
</div><div id="l689" class="code_block">   ACK Event Processing: 
</div><div id="l690" class="code_block">   1) Find the sequence number prior to which all the packets have been 
</div><div id="l691" class="code_block">      received by the receiver (ACK number) according to the following 
</div><div id="l692" class="code_block">      rule: if the receiver&#39;s loss list is empty, the ACK number is LRSN 
</div><div id="l693" class="code_block">      + 1; otherwise it is the smallest sequence number in the 
</div><div id="l694" class="code_block">      receiver&#39;s loss list. 
</div><div id="l695" class="code_block">   2) If (a) the ACK number equals to the largest ACK number ever 
</div><div id="l696" class="code_block">      acknowledged by ACK2, or (b) it is equal to the ACK number in the 
</div><div id="l697" class="code_block">      last ACK and the time interval between this two ACK packets is 
</div><div id="l698" class="code_block">      less than 2 RTTs, stop (do not send this ACK). 
</div><div id="l699" class="code_block">   3) Assign this ACK a unique increasing ACK sequence number. Pack the 
</div><div id="l700" class="code_block">      ACK packet with RTT, RTT Variance, and flow window size (available 
</div><div id="l701" class="code_block">      receiver buffer size). If this ACK is not triggered by ACK timers, 
</div><div id="l702" class="code_block">      send out this ACK and stop. 
</div><div id="l703" class="code_block">   4) Calculate the packet arrival speed according to the following 
</div><div id="l704" class="code_block">      algorithm: 
</div><div id="l705" class="code_block">         Calculate the median value of the last 16 packet arrival  
</div><div id="l706" class="code_block">         intervals (AI) using the values stored in PKT History Window.  
</div><div id="l707" class="code_block">         In these 16 values, remove those either greater than AI*8 or  
</div><div id="l708" class="code_block">         less than AI/8. If more than 8 values are left, calculate the  
</div><div id="l709" class="code_block">         average of the left values AI&#39;, and the packet arrival speed is  
</div><div id="l710" class="code_block">         1/AI&#39; (number of packets per second). Otherwise, return 0. 
</div><div id="l711" class="code_block">   5) Calculate the estimated link capacity according to the following 
</div><div id="l712" class="code_block">      algorithm: 
</div><div id="l713" class="code_block">         Calculate the median value of the last 16 packet pair  
</div><div id="l714" class="code_block">         intervals (PI) using the values in Packet Pair Window, and the  
</div><div id="l715" class="code_block">         link capacity is 1/PI (number of packets per second).  
</div><div id="l716" class="code_block">   6) Pack the packet arrival speed and estimated link capacity into the 
</div><div id="l717" class="code_block">      ACK packet and send it out. 
</div><div id="l718" class="code_block">   7) Record the ACK sequence number, ACK number and the departure time 
</div><div id="l719" class="code_block">      of this ACK in the ACK History Window. 
</div><div id="l720" class="code_block">    
</div><div id="l721" class="code_block">   NAK Event Processing: 
</div><div id="l722" class="code_block">   Search the receiver&#39;s loss list, find out all those sequence numbers 
</div><div id="l723" class="code_block">   whose last feedback time is k*RTT before, where k is initialized as 2 
</div><div id="l724" class="code_block"> 
</div><div id="l725" class="code_block"> 
</div><div id="l726" class="code_block">Yunhong Gu            Expires - October 12, 2010             [Page 13] 
</div><div id="l727" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l728" class="code_block"> 
</div><div id="l729" class="code_block"> 
</div><div id="l730" class="code_block">   and increased by 1 each time the number is fed back. Compress 
</div><div id="l731" class="code_block">   (according to section 6.4) and send these numbers back to the sender 
</div><div id="l732" class="code_block">   in an NAK packet. 
</div><div id="l733" class="code_block">    
</div><div id="l734" class="code_block">   EXP Event Processing: 
</div><div id="l735" class="code_block">   1) Put all the unacknowledged packets into the sender&#39;s loss list. 
</div><div id="l736" class="code_block">   2) If (ExpCount &gt; 16) and at least 3 seconds has elapsed since that 
</div><div id="l737" class="code_block">      last time when ExpCount is reset to 1, or, 3 minutes has elapsed, 
</div><div id="l738" class="code_block">      close the UDT connection and exit. 
</div><div id="l739" class="code_block">   3) If the sender&#39;s loss list is empty, send a keep-alive packet to 
</div><div id="l740" class="code_block">      the peer side. 
</div><div id="l741" class="code_block">   4) Increase ExpCount by 1. 
</div><div id="l742" class="code_block">    
</div><div id="l743" class="code_block">   On ACK packet received: 
</div><div id="l744" class="code_block">   1) Update the largest acknowledged sequence number. 
</div><div id="l745" class="code_block">   2) Send back an ACK2 with the same ACK sequence number in this ACK. 
</div><div id="l746" class="code_block">   3) Update RTT and RTTVar. 
</div><div id="l747" class="code_block">   4) Update both ACK and NAK period to 4 * RTT + RTTVar + SYN. 
</div><div id="l748" class="code_block">   5) Update flow window size. 
</div><div id="l749" class="code_block">   6) If this is a Light ACK, stop. 
</div><div id="l750" class="code_block">   7) Update packet arrival rate: A = (A * 7 + a) / 8, where a is the 
</div><div id="l751" class="code_block">      value carried in the ACK. 
</div><div id="l752" class="code_block">   8) Update estimated link capacity: B = (B * 7 + b) / 8, where b is 
</div><div id="l753" class="code_block">      the value carried in the ACK. 
</div><div id="l754" class="code_block">   9) Update sender&#39;s buffer (by releasing the buffer that has been 
</div><div id="l755" class="code_block">      acknowledged). 
</div><div id="l756" class="code_block">   10) Update sender&#39;s loss list (by removing all those that has been 
</div><div id="l757" class="code_block">      acknowledged). 
</div><div id="l758" class="code_block">    
</div><div id="l759" class="code_block">   On NAK packet received: 
</div><div id="l760" class="code_block">   1) Add all sequence numbers carried in the NAK into the sender&#39;s loss 
</div><div id="l761" class="code_block">      list. 
</div><div id="l762" class="code_block">   2) Update the SND period by rate control (see section 3.6). 
</div><div id="l763" class="code_block">   3) Reset the EXP time variable. 
</div><div id="l764" class="code_block">    
</div><div id="l765" class="code_block">   On ACK2 packet received: 
</div><div id="l766" class="code_block">   1) Locate the related ACK in the ACK History Window according to the 
</div><div id="l767" class="code_block">      ACK sequence number in this ACK2. 
</div><div id="l768" class="code_block">   2) Update the largest ACK number ever been acknowledged. 
</div><div id="l769" class="code_block">   3) Calculate new rtt according to the ACK2 arrival time and the ACK 
</div><div id="l770" class="code_block">      departure time, and update the RTT value as: RTT = (RTT * 7 + 
</div><div id="l771" class="code_block">      rtt) / 8. 
</div><div id="l772" class="code_block">   4) Update RTTVar by: RTTVar = (RTTVar * 3 + abs(RTT - rtt)) / 4. 
</div><div id="l773" class="code_block">   5) Update both ACK and NAK period to 4 * RTT + RTTVar + SYN. 
</div><div id="l774" class="code_block">    
</div><div id="l775" class="code_block">   On message drop request received: 
</div><div id="l776" class="code_block">   1) Tag all packets belong to the message in the receiver buffer so 
</div><div id="l777" class="code_block">      that they will not be read. 
</div><div id="l778" class="code_block">   2) Remove all corresponding packets in the receiver&#39;s loss list. 
</div><div id="l779" class="code_block"> 
</div><div id="l780" class="code_block"> 
</div><div id="l781" class="code_block">Yunhong Gu            Expires - October 12, 2010             [Page 14] 
</div><div id="l782" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l783" class="code_block"> 
</div><div id="l784" class="code_block"> 
</div><div id="l785" class="code_block">    
</div><div id="l786" class="code_block">   On Keep-alive packet received: 
</div><div id="l787" class="code_block">   Do nothing. 
</div><div id="l788" class="code_block">    
</div><div id="l789" class="code_block">   On Handshake/Shutdown packet received: 
</div><div id="l790" class="code_block">   See Section 5. 
</div><div id="l791" class="code_block">    
</div><div id="l792" class="code_block">6.3 
</div><div id="l793" class="code_block">   Flow Control 
</div><div id="l794" class="code_block">    
</div><div id="l795" class="code_block">   The flow control window size is 16 initially. 
</div><div id="l796" class="code_block">    
</div><div id="l797" class="code_block">   On ACK packet received: 
</div><div id="l798" class="code_block">   The flow window size is updated to the receiver&#39;s available buffer 
</div><div id="l799" class="code_block">   size. 
</div><div id="l800" class="code_block"> 
</div><div id="l801" class="code_block">6.4 
</div><div id="l802" class="code_block">  Loss Information Compression Scheme 
</div><div id="l803" class="code_block">    
</div><div id="l804" class="code_block">   The loss information carried in an NAK packet is an array of 32-bit 
</div><div id="l805" class="code_block">   integers. If an integer in the array is a normal sequence number (1st 
</div><div id="l806" class="code_block">   bit is 0), it means that the packet with this sequence number is 
</div><div id="l807" class="code_block">   lost; if the 1st bit is 1, it means all the packets starting from 
</div><div id="l808" class="code_block">   (including) this number to (including) the next number in the array 
</div><div id="l809" class="code_block">   (whose 1st bit must be 0) are lost. 
</div><div id="l810" class="code_block">    
</div><div id="l811" class="code_block">   For example, the following information carried in an NAK: 
</div><div id="l812" class="code_block">      0x00000002, 0x80000006, 0x0000000B, 0x0000000E 
</div><div id="l813" class="code_block">   means packets with sequence number 2, 6, 7, 8, 9, 10, 11, and 14 are 
</div><div id="l814" class="code_block">   lost. 
</div><div id="l815" class="code_block">    
</div><div id="l816" class="code_block">7. 
</div><div id="l817" class="code_block"> Configurable Congestion Control (CCC) 
</div><div id="l818" class="code_block">    
</div><div id="l819" class="code_block">   The congestion control in UDT is an open framework so that user-
</div><div id="l820" class="code_block">   defined control algorithm can be easily implemented and switched. 
</div><div id="l821" class="code_block">   Particularly, the native control algorithm is also implemented by 
</div><div id="l822" class="code_block">   this framework. 
</div><div id="l823" class="code_block">    
</div><div id="l824" class="code_block">   The user-defined algorithm may redefine several control routines to 
</div><div id="l825" class="code_block">   read and adjust several UDT parameters. The routines will be called 
</div><div id="l826" class="code_block">   when certain event occurs. For example, when an ACK is received, the 
</div><div id="l827" class="code_block">   control algorithm may increase the congestion window size. 
</div><div id="l828" class="code_block">    
</div><div id="l829" class="code_block">7.1 
</div><div id="l830" class="code_block">  CCC Interface 
</div><div id="l831" class="code_block">    
</div><div id="l832" class="code_block">   UDT allow users to access two congestion control parameters: the 
</div><div id="l833" class="code_block">   congestion window size and the inter-packet sending interval. Users 
</div><div id="l834" class="code_block">   may adjust these two parameters to realize window-based control, 
</div><div id="l835" class="code_block">   rate-based control, or a hybrid approach. 
</div><div id="l836" class="code_block">    
</div><div id="l837" class="code_block">   In addition, the following parameters should also be exposed. 
</div><div id="l838" class="code_block"> 
</div><div id="l839" class="code_block"> 
</div><div id="l840" class="code_block">Yunhong Gu            Expires - October 12, 2010             [Page 15] 
</div><div id="l841" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l842" class="code_block"> 
</div><div id="l843" class="code_block"> 
</div><div id="l844" class="code_block">   1) RTT 
</div><div id="l845" class="code_block">   2) Maximum Segment/Packet Size 
</div><div id="l846" class="code_block">   3) Estimated Bandwidth 
</div><div id="l847" class="code_block">   4) The latest packet sequence number that has been sent so far 
</div><div id="l848" class="code_block">   5) Packet arriving rate at the receiver side 
</div><div id="l849" class="code_block">    
</div><div id="l850" class="code_block">   A UDT implementation may expose additional parameters as well. This 
</div><div id="l851" class="code_block">   information can be used in user-defined congestion control algorithms 
</div><div id="l852" class="code_block">   to adjust the packet sending rate. 
</div><div id="l853" class="code_block">    
</div><div id="l854" class="code_block">   The following control events can be redefined via CCC (e.g., by a 
</div><div id="l855" class="code_block">   callback function). 
</div><div id="l856" class="code_block">    
</div><div id="l857" class="code_block">   1) init: when the UDT socket is connected. 
</div><div id="l858" class="code_block">   2) close: when the UDT socket is closed. 
</div><div id="l859" class="code_block">   3) onACK: when ACK is received. 
</div><div id="l860" class="code_block">   4) onLOSS: when NACK is received. 
</div><div id="l861" class="code_block">   5) onTimeout: when timeout occurs. 
</div><div id="l862" class="code_block">   6) onPktSent: when a data packet is sent. 
</div><div id="l863" class="code_block">   7) onPktRecv: when a data packet is received. 
</div><div id="l864" class="code_block">    
</div><div id="l865" class="code_block">   Users can also adjust the following parameters in the user-defined 
</div><div id="l866" class="code_block">   control algorithms. 
</div><div id="l867" class="code_block">    
</div><div id="l868" class="code_block">   1) ACK interval: An ACK may be sent every fixed number of packets. 
</div><div id="l869" class="code_block">      User may define this interval. If this value is -1, then it means 
</div><div id="l870" class="code_block">      no ACK will be sent based on packet interval. 
</div><div id="l871" class="code_block">   2) ACK Timer: An ACK will also be sent every fixed time interval. 
</div><div id="l872" class="code_block">      This is mandatory in UDT. The maximum and default ACK time 
</div><div id="l873" class="code_block">      interval is SYN. 
</div><div id="l874" class="code_block">   3) RTO: UDT uses 4 * RTT + RTTVar to compute RTO. Users may redefine 
</div><div id="l875" class="code_block">      this. 
</div><div id="l876" class="code_block">    
</div><div id="l877" class="code_block">   Detailed description and discussion of UDT/CCC can be found in 
</div><div id="l878" class="code_block">   [GG05]. 
</div><div id="l879" class="code_block">    
</div><div id="l880" class="code_block">7.2 
</div><div id="l881" class="code_block">  UDT&#39;s Native Control Algorithm 
</div><div id="l882" class="code_block">    
</div><div id="l883" class="code_block">   UDT has a native and default control algorithm, which will be used if 
</div><div id="l884" class="code_block">   no user-defined algorithm is implemented and configured. The native 
</div><div id="l885" class="code_block">   UDT algorithm should be implemented using CCC. 
</div><div id="l886" class="code_block">    
</div><div id="l887" class="code_block">   UDT&#39;s native algorithm is a hybrid congestion control algorithm, 
</div><div id="l888" class="code_block">   hence it adjusts both the congestion window size and the inter-packet 
</div><div id="l889" class="code_block">   interval. The native algorithm uses timer-based ACK and the ACK 
</div><div id="l890" class="code_block">   interval is SYN. 
</div><div id="l891" class="code_block">    
</div><div id="l892" class="code_block">   The initial congestion window size is 16 packets and the initial 
</div><div id="l893" class="code_block">   inter-packet interval is 0. The algorithm start with Slow Start phase 
</div><div id="l894" class="code_block"> 
</div><div id="l895" class="code_block"> 
</div><div id="l896" class="code_block">Yunhong Gu            Expires - October 12, 2010             [Page 16] 
</div><div id="l897" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l898" class="code_block"> 
</div><div id="l899" class="code_block"> 
</div><div id="l900" class="code_block">   until the first ACK or NAK arrives. 
</div><div id="l901" class="code_block">    
</div><div id="l902" class="code_block">   On ACK packet received: 
</div><div id="l903" class="code_block">   1) If the current status is in the slow start phase, set the 
</div><div id="l904" class="code_block">      congestion window size to the product of packet arrival rate and 
</div><div id="l905" class="code_block">      (RTT + SYN). Slow Start ends. Stop. 
</div><div id="l906" class="code_block">   2) Set the congestion window size (CWND) to: CWND = A * (RTT + SYN) + 
</div><div id="l907" class="code_block">      16. 
</div><div id="l908" class="code_block">   3) The number of sent packets to be increased in the next SYN period 
</div><div id="l909" class="code_block">      (inc) is calculated as:  
</div><div id="l910" class="code_block">         if (B &lt;= C) 
</div><div id="l911" class="code_block">            inc = min_inc; 
</div><div id="l912" class="code_block">         else 
</div><div id="l913" class="code_block">            inc = max(10^(ceil(log10((B-C)*PS*8))) * Beta/PS, min_inc); 
</div><div id="l914" class="code_block">      where B is the estimated link capacity and C is the current 
</div><div id="l915" class="code_block">      sending speed. All are counted as packets per second. Beta is a
</div><div id="l916" class="code_block">      constant value of 0.0000015. &quot;min_inc&quot; is the minimum increase
</div><div id="l917" class="code_block">      value, 0.01 - i.e., we will increase at least 1 packet per second.
</div><div id="l918" class="code_block">   4) The SND period is updated as: 
</div><div id="l919" class="code_block">         SND = (SND * SYN) / (SND * inc + SYN). 
</div><div id="l920" class="code_block">    
</div><div id="l921" class="code_block">   These four parameters are used in rate decrease, and their initial 
</div><div id="l922" class="code_block">   values are in the parentheses: AvgNAKNum (1), NAKCount (1), 
</div><div id="l923" class="code_block">   DecCount(1), LastDecSeq (initial sequence number - 1). 
</div><div id="l924" class="code_block">    
</div><div id="l925" class="code_block">   We define a congestion period as the period between two NAKs in which 
</div><div id="l926" class="code_block">   the first biggest lost packet sequence number is greater than the 
</div><div id="l927" class="code_block">   LastDecSeq, which is the biggest sequence number when last time the 
</div><div id="l928" class="code_block">   packet sending rate is decreased. 
</div><div id="l929" class="code_block">    
</div><div id="l930" class="code_block">   AvgNAKNum is the average number of NAKs in a congestion period. 
</div><div id="l931" class="code_block">   NAKCount is the current number of NAKs in the current period. 
</div><div id="l932" class="code_block">    
</div><div id="l933" class="code_block">   On NAK packet received: 
</div><div id="l934" class="code_block">   1) If it is in slow start phase, slow start ends.
</div><div id="l935" class="code_block">      If receiving rate has been observed set inter-packet interval to
</div><div id="l936" class="code_block">      1/recvrate, stop. Otherwise, set the sending rate according to
</div><div id="l937" class="code_block">      the current window size (cwnd / rtt + SYN), continue to decrease
</div><div id="l938" class="code_block">      it with step 2.
</div><div id="l939" class="code_block">   2) If this NAK starts a new congestion period, increase inter-packet 
</div><div id="l940" class="code_block">      interval (snd) to snd = snd * 1.125; Update AvgNAKNum, reset 
</div><div id="l941" class="code_block">      NAKCount to 1, and compute DecRandom to a random (average 
</div><div id="l942" class="code_block">      distribution) number between 1 and AvgNAKNum. Update LastDecSeq. 
</div><div id="l943" class="code_block">      Stop. 
</div><div id="l944" class="code_block">   3) If DecCount &lt;= 5, and NAKCount == DecCount * DecRandom: 
</div><div id="l945" class="code_block">        a. Update SND period: SND = SND * 1.125; 
</div><div id="l946" class="code_block">        b. Increase DecCount by 1; 
</div><div id="l947" class="code_block">        c. Record the current largest sent sequence number (LastDecSeq). 
</div><div id="l948" class="code_block">    
</div><div id="l949" class="code_block">   The native UDT control algorithm is designed for bulk data transfer 
</div><div id="l950" class="code_block">   over high BDP networks. [GHG04a] 
</div><div id="l951" class="code_block">    
</div><div id="l952" class="code_block"> 
</div><div id="l953" class="code_block"> 
</div><div id="l954" class="code_block">Yunhong Gu            Expires - October 12, 2010             [Page 17] 
</div><div id="l955" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l956" class="code_block"> 
</div><div id="l957" class="code_block"> 
</div><div id="l958" class="code_block">Security Considerations 
</div><div id="l959" class="code_block">    
</div><div id="l960" class="code_block">   UDT&#39;s security mechanism is similar to that of TCP. Most of TCP&#39;s 
</div><div id="l961" class="code_block">   approach to counter security attack should also be implemented in 
</div><div id="l962" class="code_block">   UDT. 
</div><div id="l963" class="code_block">    
</div><div id="l964" class="code_block">IANA Considerations 
</div><div id="l965" class="code_block"> 
</div><div id="l966" class="code_block">   This document has no actions for IANA. 
</div><div id="l967" class="code_block"> 
</div><div id="l968" class="code_block">Normative References 
</div><div id="l969" class="code_block"> 
</div><div id="l970" class="code_block">   [RFC768] J. Postel, User Datagram Protocol, Aug. 1980. 
</div><div id="l971" class="code_block"> 
</div><div id="l972" class="code_block">Informative References 
</div><div id="l973" class="code_block">    
</div><div id="l974" class="code_block">   [RFC4987] W. Eddy, TCP SYN Flooding Attacks and Common Mitigations. 
</div><div id="l975" class="code_block">    
</div><div id="l976" class="code_block">   [GG07] Yunhong Gu and Robert L. Grossman, UDT: UDP-based Data 
</div><div id="l977" class="code_block">      Transfer for High-Speed Wide Area Networks, Computer Networks 
</div><div id="l978" class="code_block">      (Elsevier). Volume 51, Issue 7. May 2007. 
</div><div id="l979" class="code_block">    
</div><div id="l980" class="code_block">   [GG05] Yunhong Gu and Robert L. Grossman, Supporting Configurable 
</div><div id="l981" class="code_block">      Congestion Control in Data Transport Services, SC 2005, Nov 12 - 
</div><div id="l982" class="code_block">      18, Seattle, WA, USA. 
</div><div id="l983" class="code_block">    
</div><div id="l984" class="code_block">   [GHG04b] Yunhong Gu, Xinwei Hong, and Robert L. Grossman, Experiences 
</div><div id="l985" class="code_block">      in Design and Implementation of a High Performance Transport 
</div><div id="l986" class="code_block">      Protocol, SC 2004, Nov 6 - 12, Pittsburgh, PA, USA. 
</div><div id="l987" class="code_block">    
</div><div id="l988" class="code_block">   [GHG04a] Yunhong Gu, Xinwei Hong, and Robert L. Grossman, An Analysis 
</div><div id="l989" class="code_block">      of AIMD Algorithms with Decreasing Increases, First Workshop on 
</div><div id="l990" class="code_block">      Networks for Grid Applications (Gridnets 2004), Oct. 29, San Jose, 
</div><div id="l991" class="code_block">      CA, USA. 
</div><div id="l992" class="code_block">    
</div><div id="l993" class="code_block">   [LM97] T. V. Lakshman and U. Madhow, The Performance of TCP/IP for 
</div><div id="l994" class="code_block">      Networks with High Bandwidth-Delay Products and Random Loss, 
</div><div id="l995" class="code_block">      IEEE/ACM Trans. on Networking, vol. 5 no 3, July 1997, pp. 336-
</div><div id="l996" class="code_block">      350.  
</div><div id="l997" class="code_block">  
</div><div id="l998" class="code_block">   [RFC5681] Allman, M., Paxson, V. and E. Blanton, TCP Congestion 
</div><div id="l999" class="code_block">      Control, September 2009. 
</div><div id="l1000" class="code_block">    
</div><div id="l1001" class="code_block">   [RFC4960] R. Stewart, Ed. Stream Control Transmission Protocol. 
</div><div id="l1002" class="code_block">      September 2007. 
</div><div id="l1003" class="code_block">    
</div><div id="l1004" class="code_block">   [TS06] K. Tan, Jingmin Song, Qian Zhang, Murari Sridharan, A Compound 
</div><div id="l1005" class="code_block">      TCP Approach for High-speed and Long Distance Networks, in IEEE 
</div><div id="l1006" class="code_block">      Infocom, April 2006, Barcelona, Spain. 
</div><div id="l1007" class="code_block"> 
</div><div id="l1008" class="code_block"> 
</div><div id="l1009" class="code_block">Yunhong Gu            Expires - October 12, 2010             [Page 18] 
</div><div id="l1010" class="code_block">                                 UDT                   April 12, 2010 
</div><div id="l1011" class="code_block"> 
</div><div id="l1012" class="code_block"> 
</div><div id="l1013" class="code_block">    
</div><div id="l1014" class="code_block">   [UDT] UDT: UDP-based Data Transfer, URL http://udt.sf.net. 
</div><div id="l1015" class="code_block">    
</div><div id="l1016" class="code_block">   [XHR04] Lisong Xu, Khaled Harfoush, and Injong Rhee, Binary Increase 
</div><div id="l1017" class="code_block">      Congestion Control for Fast Long-Distance Networks, INFOCOM 2004. 
</div><div id="l1018" class="code_block">    
</div><div id="l1019" class="code_block">Author&#39;s Addresses 
</div><div id="l1020" class="code_block">    
</div><div id="l1021" class="code_block">   Yunhong Gu 
</div><div id="l1022" class="code_block">   National Center for Data Mining 
</div><div id="l1023" class="code_block">   University of Illinois at Chicago 
</div><div id="l1024" class="code_block">   713 SEO, M/C 249, 851 S Morgan St 
</div><div id="l1025" class="code_block">   Chicago, IL 60607, USA 
</div><div id="l1026" class="code_block">   Phone: +1 (312) 413-9576 
</div><div id="l1027" class="code_block">   Email: yunhong@lac.uic.edu 
</div><div id="l1028" class="code_block">    
</div><div id="l1029" class="code_block">    
</div><div id="l1030" class="code_block">
</div><div id="l1031" class="code_block">
</div><div id="l1032" class="code_block">
</div><div id="l1033" class="code_block">
</div><div id="l1034" class="code_block">
</div><div id="l1035" class="code_block">
</div><div id="l1036" class="code_block">
</div><div id="l1037" class="code_block">
</div><div id="l1038" class="code_block">
</div><div id="l1039" class="code_block">
</div><div id="l1040" class="code_block">
</div><div id="l1041" class="code_block">
</div><div id="l1042" class="code_block">
</div><div id="l1043" class="code_block">
</div><div id="l1044" class="code_block">
</div><div id="l1045" class="code_block">
</div><div id="l1046" class="code_block">
</div><div id="l1047" class="code_block">
</div><div id="l1048" class="code_block">
</div><div id="l1049" class="code_block">
</div><div id="l1050" class="code_block">
</div><div id="l1051" class="code_block">
</div><div id="l1052" class="code_block">
</div><div id="l1053" class="code_block">
</div><div id="l1054" class="code_block">
</div><div id="l1055" class="code_block">
</div><div id="l1056" class="code_block">
</div><div id="l1057" class="code_block">
</div><div id="l1058" class="code_block">
</div><div id="l1059" class="code_block">
</div><div id="l1060" class="code_block">
</div><div id="l1061" class="code_block">
</div><div id="l1062" class="code_block"> 
</div><div id="l1063" class="code_block"> 
</div><div id="l1064" class="code_block">Yunhong Gu            Expires - October 12, 2010             [Page 19] 
</div></pre></div></td></tr></table></div>

      
    </div>
  

                    </div>
                    
                    
                </div>
            



        </div>
    </section>
      

    <footer class="sandiego">
    <div class="as-row">
        <div class="footer-wrapper">
            <nav aria-label="Site Links" role="navigation">
                <section>
                    <div class="as-h2">SourceForge</div>
                    <ul>
                    
                        <li><a href="/create/" title="Create a Project">Create a Project</a></li>
                    
                        <li><a href="/directory/" title="Open Source Software Directory">Open Source Software</a></li>
                        <li><a href="/software/" title="Business Software Directory">Business Software</a></li>
                        
                            
                            <li><a href="/top" title="Top Open Source Projects">Top Downloaded Projects</a></li>
                        

                    </ul>
                </section>
            </nav>
            <nav aria-label="Company Links" role="navigation">
                <section>
                    <div class="as-h2">Company</div>
                    <ul>
                        <li><a href="/about">About</a></li>
                        <li><a href="/about/leadership" title="Open Source Software Directory">Team</a></li>
                        <li class="h-card">
                            <address>
                                <span class="p-name p-org">SourceForge Headquarters</span><br>
                                <span class="p-street-address">225 Broadway Suite 1600</span><br>
                                <span class="p-locality">San Diego, CA <span class="p-postal-code">92101</span></span><br>
                                <span class="p-tel">+1 (858) 422-6466</span><br>
                            </address>
                        </li>
                        <li id="social">
                            
<span></span>
<a href="https://twitter.com/sourceforge" class="twitter" rel="nofollow" target="_blank" title="SourceForge on X">


<svg  class="vertical-icon-fix" data-name="twitter" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1684 408q-67 98-162 167 1 14 1 42 0 130-38 259.5t-115.5 248.5-184.5 210.5-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5t-114-159.5q33 5 61 5 43 0 85-11-112-23-185.5-111.5t-73.5-205.5v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5t371.5 99.5q-8-38-8-74 0-134 94.5-228.5t228.5-94.5q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z"/></svg></a>
<a href="https://fosstodon.org/@sourceforge" rel="me nofollow" target="_blank" title="SourceForge on Mastodon">


<svg  class="vertical-icon-fix" data-name="mastodon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M433 179.11c0-97.2-63.71-125.7-63.71-125.7-62.52-28.7-228.56-28.4-290.48 0 0 0-63.72 28.5-63.72 125.7 0 115.7-6.6 259.4 105.63 289.1 40.51 10.7 75.32 13 103.33 11.4 50.81-2.8 79.32-18.1 79.32-18.1l-1.7-36.9s-36.31 11.4-77.12 10.1c-40.41-1.4-83-4.4-89.63-54a102.54 102.54 0 0 1-.9-13.9c85.63 20.9 158.65 9.1 178.75 6.7 56.12-6.7 105-41.3 111.23-72.9 9.8-49.8 9-121.5 9-121.5zm-75.12 125.2h-46.63v-114.2c0-49.7-64-51.6-64 6.9v62.5h-46.33V197c0-58.5-64-56.6-64-6.9v114.2H90.19c0-122.1-5.2-147.9 18.41-175 25.9-28.9 79.82-30.8 103.83 6.1l11.6 19.5 11.6-19.5c24.11-37.1 78.12-34.8 103.83-6.1 23.71 27.3 18.4 53 18.4 175z"/></svg></a>
<a href="https://www.facebook.com/sourceforgenet/" class="facebook" rel="nofollow" target="_blank" title="SourceForge on Facebook">


<svg  data-name="facebook" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1343 12v264h-157q-86 0-116 36t-30 108v189h293l-39 296h-254v759h-306v-759h-255v-296h255v-218q0-186 104-288.5t277-102.5q147 0 228 12z"/></svg></a>
<a href="https://www.linkedin.com/company/sourceforge.net" class="linkedin" rel="nofollow" target="_blank" title="SourceForge on LinkedIn">


<svg  data-name="linkedin" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M477 625v991h-330v-991h330zm21-306q1 73-50.5 122t-135.5 49h-2q-82 0-132-49t-50-122q0-74 51.5-122.5t134.5-48.5 133 48.5 51 122.5zm1166 729v568h-329v-530q0-105-40.5-164.5t-126.5-59.5q-63 0-105.5 34.5t-63.5 85.5q-11 30-11 81v553h-329q2-399 2-647t-1-296l-1-48h329v144h-2q20-32 41-56t56.5-52 87-43.5 114.5-15.5q171 0 275 113.5t104 332.5z"/></svg></a>

<span></span>
                        </li>
                    </ul>
                </section>
            </nav>
             <nav aria-label="Resources Links" role="navigation">
                <section>
                    <div class="as-h2">Resources</div>
                    <ul>
                        
                            <li><a href="/support" title="Support Section">Support</a></li>
                            <li><a href="/p/forge/documentation/Docs%20Home/" title="Site Documentation">Site Documentation</a></li>
                        
                        <li><a href="https://fosstodon.org/@sourceforgestatus" title="Site Status" rel="me nofollow">Site Status</a></li>
                        <li><a href="/reviews" title="Reviews" rel="me nofollow">SourceForge Reviews</a></li>

                    </ul>
                </section>
            </nav>
            <section class="footer-logo">
                <a href="/" title="Home" class="sf-logo">
                    
    
    <img src="https://a.fsdn.com/con/images/sandiego/sf-logo-full.svg"  alt="SourceForge logo" class="sf-logo-full"/>
                </a>
            </section>
        </div>
    </div>
    <section class="l-nav-bottom">
        <nav class="row">
            
                
            
        
    <div class="columns small-12 large-6 copyright-notice">
        &copy; 2025 Slashdot Media. All Rights Reserved.
    </div>
    <div class="columns large-6 links links-right">
        

    
    

    <a href="https://slashdotmedia.com/terms-of-use" target="_blank" title="Terms" rel="nofollow">Terms</a>
    <a href="https://slashdotmedia.com/privacy-statement/" target="_blank" title="Privacy" rel="nofollow">Privacy</a>

    
    
    
        
        <a href="#" title="Privacy Choices" id="privacy-choices" class="btn-privay-choices">Privacy Choices</a>
    

    

    
        <a href="https://slashdotmedia.com/contact/" target="_blank" title="Advertise" rel="nofollow">Advertise</a>
    
    </div>
        </nav>
    </section>

    </footer>
    





    
    






</div>


<div id="messages">
    
</div>


    <!-- ew:body_js -->


    <script type="text/javascript" src="https://a.fsdn.com/allura/nf/1744816769/_ew_/_slim/js?href=allura%2Fjs%2Fjquery.notify.js%3Ballura%2Fjs%2Fjquery.tooltipster.js%3Ballura%2Fjs%2Fallura-base.js%3Ballura%2Fjs%2Fchecklist.js%3Ballura%2Fjs%2Fadmin_modal.js%3Bjs%2Fjquery.lightbox_me.js%3Ballura%2Fjs%2Fmemorable.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fshared.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fsticky.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fsandiego%2Fchrome.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fsandiego%2Futilities.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fvendor%2Ffoundation6%2Fplugins%2Ffoundation.core.min.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fvendor%2Ffoundation6%2Fplugins%2Ffoundation.util.mediaQuery.min.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fvendor%2Ffoundation6%2Fplugins%2Ffoundation.util.keyboard.min.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fvendor%2Ffoundation6%2Fplugins%2Ffoundation.util.box.min.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fvendor%2Ffoundation6%2Fplugins%2Ffoundation.util.nest.min.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fvendor%2Ffoundation6%2Fplugins%2Ffoundation.dropdownMenu.min.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fvendor%2Ffoundation6%2Fplugins%2Ffoundation.offcanvas.min.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fvendor%2Ffoundation6%2Fplugins%2Ffoundation.toggler.min.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fsandiego%2Fproject.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fvendor%2Fjquery.typeahead.min.js%3Ballura%2Fjs%2Fmaximize-content.js"></script>

    
<!-- /ew:body_js -->



    <!-- ew:body_js_tail -->


    <script type="text/javascript" src="https://a.fsdn.com/allura/nf/1744816769/_ew_/_slim/js?href=theme%2Fsftheme%2Fjs%2Fsftheme%2Fvendor%2Ffoundation6%2Fplugins%2Ffoundation.util.triggers.min.js%3Btheme%2Fsftheme%2Fjs%2Fsftheme%2Fvendor%2Ffoundation6%2Fplugins%2Ffoundation.reveal.min.js"></script>

    
<!-- /ew:body_js_tail -->




<script type="text/javascript">(function() {
  $('#access_urls .btn').click(function(evt){
    evt.preventDefault();
    var parent = $(this).parents('.btn-bar');
    var checkout_cmd = $(this).attr('data-url');
    $(parent).find('input').val(checkout_cmd);
    $(parent).find('span').text($(this).attr('title')+' access');
    $(this).parent().children('.btn').removeClass('active');
    $(this).addClass('active');
    if (checkout_cmd.indexOf(' http://') !== -1 || checkout_cmd.indexOf(' https://') !== -1 ) {
      $('#http-2fa-msg').show();
    } else {
      $('#http-2fa-msg').hide();
    }
  });
  $('#access_urls .btn').first().click();

  
  var repo_status = document.getElementById('repo_status');
  // The repo_status div will only be present if repo.status != 'ready'
  if (repo_status) {
    $('.spinner').show()
    var delay = 500;
    function check_status() {
        $.get('/p/udt/git/status', function(data) {
            if (data.status === 'ready') {
                $('.spinner').hide()
                $('#repo_status h2').html('Repo status: ready. <a href="." rel="nofollow">Click here to refresh this page.</a>');
            }
            else {
                $('#repo_status h2 span').html(data.status);
                if (delay < 60000){
                    delay = delay * 2;
                }
                window.setTimeout(check_status, delay);
            }
        });
    }
    var status_checker = window.setTimeout(check_status, delay);
    
  }
}());
</script>

<script type="text/javascript">(function() {
  $(window).on('hashchange', function(e) {
    var hash = window.location.hash.substring(1);
    if ('originalEvent' in e && 'oldURL' in e.originalEvent) {
      $('#' + e.originalEvent.oldURL.split('#')[1]).css('background-color', 'transparent');
    }
    if (hash !== '' && hash.substring(0, 1) === 'l' && !isNaN(hash.substring(1))) {
      $('#' + hash).css('background-color', '#ffff99');
    }
  }).trigger('hashchange');

  var clicks = 0;
  $('.code_block').each(function(index, element) {
    $(element).on('click', function() {
      // Trick to ignore double and triple clicks
      clicks++;
      if (clicks === 1) {
        setTimeout(function() {
          if (clicks === 1) {
            var hash = window.location.hash.substring(1);
            if (hash !== '' && hash.substring(0, 1) === 'l' && !isNaN(hash.substring(1))) {
              $('#' + hash).css('background-color', 'transparent');
            }
            $(element).css('background-color', '#ffff99');
            window.history.pushState({}, document.title, window.location.pathname + window.location.search + '#' + $(element).attr('id'));
          }
          clicks = 0;
        }, 500);
      }
    });
  });
}());
</script>


    


    
    
    <script>
        $(document).foundation();
    </script>
    








    

<!-- CCM Tag -->
<script>
    (function () {
        bizx.cmp.ifConsent({ purposes: 'all', vendors: 'bombora'}, function () {
            /*global _ml:true, window */
            _ml = window._ml || {};
            
            _ml.eid = '771';
            _ml.fp = 'd86510e7-187d-4b6b-87c7-63fc6836bef5';  
            var s = document.getElementsByTagName('script')[0], cd = new Date(), mltag = document.createElement('script');
            mltag.type = 'text/javascript';
            mltag.async = true;
            mltag.defer = true;
            mltag.src = '//ml314.com/tag.aspx?' + cd.getDate() + cd.getMonth() + cd.getFullYear();
            s.parentNode.insertBefore(mltag, s);
        });
    })();
</script>
<!-- End CCM Tag -->




<script>
    $(document).ready(function () {
        $(".tooltip, .m-tooltip").each(function(){
            let $el = $(this);
            $el.tooltipster({
                animation: 'fade',
                delay: 200,
                theme: 'tooltipster-light',
                trigger: 'hover',
                position: $el.data('position') || 'right',
                iconCloning: false,
                maxWidth: 300,
                contentAsHTML: true,
                interactive: true
            }).focus(function () {
                $(this).tooltipster('show');
            }).blur(function () {
                $(this).tooltipster('hide');
            });
        });
    });
</script>

    



<script type="text/javascript">
    bizx.cmp.ifConsent({ purposes: ['storage', 'measurement'], vendors: 'google-analytics'}, function () {
        /* jshint ignore:start */
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        /* jshint ignore:end */

        window.dataLayer = window.dataLayer || [];
        function gtag(){ window.dataLayer.push(arguments); }
        window.gtag = window.gtag || gtag;
        bizx.cmp.embedScript("https://www.googletagmanager.com/gtag/js");
        gtag('js', new Date());
        gtag('set', {
            'page_location': 'https://sourceforge.net/p/udt/git/ci/master/tree/udt4/draft-gg-udt-xx.txt',
        });
    });
</script>










<script>
        function gam(id){
            bizx.cmp.ifConsent({ purposes: 'all', vendors: 'google-ads'}, function () {
                bizx.cmp.embedScript(`https://pagead2.googlesyndication.com/pagead/js/pcd.js?${id}`,
                    true,  // async
                    'head', // location
                    null, // callback
                    false, // defer
                    {id: `google-pcd-tag-${id}`, 'data-audience-pixel': 'dc_iu=/41014381/DFPAudiencePixel;dc_seg=' + id});
            });
        }

        
            gam("8901705213");gam("8901712041");</script>

<script type="text/javascript">
    /*global ga, gtag */

    
        
        bizx.cmp.ifConsent({ purposes: ['storage', 'measurement'], vendors: 'google-analytics'}, function () {
            gtag('config', 'G-1H226E4E4L', {
                
                send_page_view: false,
                'SF_Page_Type': '', 
                user_properties: {
                    'SF_Logged_in': 'Logged Out', 
                },
                'devicePixelRatio': SF.devicePixelRatio, 
            });
            gtag('event', 'page_view', { send_to: 'G-1H226E4E4L' });
        });
    
    
    
        
</script>

</body>
</html>